{"version":3,"sources":["webpack:///webpack/bootstrap 396d017a838ae238c08a","webpack:///./js/main.js","webpack:///./js/DemoCircles/DemoClientGame.js"],"names":["WEB_SOCKET_SWF_LOCATION","onDocumentReady","clientGame","window","addEventListener","DemoClientGame","startGameClock","view","DemoApp","DemoView","insertIntoHTMLElementWithId","superclass","tick","call","stats","update","gameClockReal","entityDesc","diameter","radius","aCircleView","CAAT","ShapeActor","create","setSize","setFillStyle","Color","prototype","hsvToRgb","entityid","toHex","setLocation","x","y","newEntity","isOwnedByMe","clientid","netChannel","entityType","Constants","ENTITY_TYPES","PLAYER_ENTITY","PlayerEntity","addTraitAndExecute","RealtimeMultiplayerGame","controller","traits","KeyboardInputTrait","clientCharacter","CircleEntity","position","set","setView","fieldController","addEntity","entityDescAsArray","entityDescription","color","messageData","netChannelDidConnect","log","joinGame","getClientid","netChannelDidDisconnect","msg","console","AbstractClientGame"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 396d017a838ae238c08a","import DemoClientGame from './DemoCircles/DemoClientGame';\n\n(function () {\n    var WEB_SOCKET_SWF_LOCATION = \"ABC\";\n    // Callback for when browse is ready\n    var onDocumentReady = function () {\n        var clientGame = new DemoClientGame();\n    };\n\n    // Listen for ready\n    window.addEventListener('load', onDocumentReady, false);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./js/main.js","/**\n File:\n DemoServerGame\n Created By:\n Mario Gonzalez\n Project:\n DemoApp\n Abstract:\n This is a concrete server instance of our game\n Basic Usage:\n DemoServerGame = new DemoApp.DemoServerGame();\n DemoServerGame.start();\n DemoServerGame.explodeEveryone();\n Version:\n 1.0\n */\n\nexport default class DemoClientGame extends RealtimeMultiplayerGame.AbstractClientGame {\n\n    constructor() {\n        super();\n        this.startGameClock();\n        return this;\n    };\n\n\n    setupView() {\n        this.view = new DemoApp.DemoView();\n        this.view.insertIntoHTMLElementWithId(\"gamecontainer\");\n\n        super.setupView(this);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    tick() {\n        this.superclass.tick.call(this);\n        this.view.stats.update();\n        this.view.update(this.gameClockReal);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    createEntityFromDesc(entityDesc) {\n\n        var diameter = entityDesc.radius * 2;\n\n        // Create a view via CAAT\n        var aCircleView = new CAAT.ShapeActor();\n        aCircleView.create();\n        aCircleView.setSize(diameter, diameter);\n        aCircleView.setFillStyle(\"#\" + CAAT.Color.prototype.hsvToRgb((entityDesc.entityid * 15) % 360, 40, 99).toHex()); // Random color\n        aCircleView.setLocation(entityDesc.x, entityDesc.y); // Place in the center of the screen, use the director's width/height\n\n        var newEntity = null;\n\n        var isOwnedByMe = entityDesc.clientid == this.netChannel.clientid;\n        // If this is a player entity\n        if (entityDesc.entityType & Constants.ENTITY_TYPES.PLAYER_ENTITY) {\n            newEntity = new PlayerEntity(entityDesc.entityid, entityDesc.clientid);\n\n            // If it is a player entity and it's my player entity - attach a KeyboardInputTrait to it\n            if (isOwnedByMe) {\n                newEntity.addTraitAndExecute(new RealtimeMultiplayerGame.controller.traits.KeyboardInputTrait());\n                this.clientCharacter = newEntity;\n            }\n        } else {\n            newEntity = new CircleEntity(entityDesc.entityid, entityDesc.clientid);\n        }\n\n        newEntity.position.set(entityDesc.x, entityDesc.y);\n        newEntity.setView(aCircleView);\n\n        this.fieldController.addEntity(newEntity);\n    };\n\n    /**\n     * Called by the ClientNetChannel, it sends us an array containing tightly packed values and expects us to return a meaningful object\n     * It is left up to each game to implement this function because only the game knows what it needs to send.\n     * However the 4 example projects in RealtimeMultiplayerNodeJS offer should be used ans examples\n     *\n     * @param {Array} entityDescAsArray An array of tightly packed values\n     * @return {Object} An object which will be returned to you later on tied to a specific entity\n     */\n    parseEntityDescriptionArray(entityDescAsArray) {\n        var entityDescription = {};\n\n        // It is left upto each game to implement this function because only the game knows what it needs to send.\n        // However the 4 example projects in RealtimeMultiplayerNodeJS offer this an example\n        entityDescription.entityid = entityDescAsArray[0];\n        entityDescription.clientid = entityDescAsArray[1];\n        entityDescription.entityType = +entityDescAsArray[2];\n        entityDescription.x = +entityDescAsArray[3];\n        entityDescription.y = +entityDescAsArray[4];\n        entityDescription.radius = +entityDescAsArray[5];\n        entityDescription.color = entityDescAsArray[6];\n        return entityDescription;\n    };\n\n    /**\n     * @inheritDoc\n     */\n    netChannelDidConnect(messageData) {\n        this.superclass.netChannelDidConnect.call(this, messageData);\n        this.prototype.log(\"this: Joining Game\");\n        this.joinGame(\"Player\" + this.netChannel.getClientid()); // Automatically join the game with some name\n    };\n\n    /**\n     * @inheritDoc\n     */\n    netChannelDidDisconnect(messageData) {\n        this.superclass.netChannelDidDisconnect.call(this, messageData);\n        this.prototype.log(\"this: netChannelDidDisconnect\"); // Display disconnect\n    };\n\n    /**\n     * This function logs something to the right panel\n     * @param {Object} An object in the form of: { message: ['Client', 'domReady'] }\n     */\n    log(msg) {\n        console.log(\"DemoClientGame: \" + msg);\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoClientGame.js"],"sourceRoot":""}