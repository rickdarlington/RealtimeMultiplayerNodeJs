{"version":3,"sources":["webpack:///webpack/bootstrap 4f39c0f83186576d87a3","webpack:///./js/DemoCircles/DemoAppConstants.js","webpack:///./js/main.js","webpack:///./js/DemoCircles/DemoClientGame.js","webpack:///./js/DemoCircles/CircleEntity.js","webpack:///./js/DemoCircles/DemoView.js","webpack:///./js/core/AbstractClientGame.js","webpack:///./js/core/AbstractGame.js"],"names":["module","exports","Constants","ENTITY_DEFAULT_RADIUS","GAME_WIDTH","GAME_HEIGHT","MAX_CIRCLES","GAME_DURATION","UNKNOWN","GENERIC_CIRCLE","PLAYER_ENTITY","ENTITY_TYPES","DemoClientGame","require","onDocumentReady","clientGame","window","addEventListener","CircleEntity","DemoView","AbstractClientGame","startGameClock","view","insertIntoHTMLElementWithId","stats","update","gameClockReal","entityDesc","diameter","radius","aCircleView","CAAT","ShapeActor","create","setSize","setFillStyle","Color","prototype","hsvToRgb","entityid","toHex","setLocation","x","y","newEntity","isOwnedByMe","clientid","netChannel","entityType","PlayerEntity","addTraitAndExecute","RealtimeMultiplayerGame","controller","traits","KeyboardInputTrait","clientCharacter","position","set","setView","fieldController","addEntity","entityDescAsArray","entityDescription","color","messageData","log","joinGame","getClientid","msg","console","nOffset","Math","random","DemoApp","anEntityid","aClientid","superclass","constructor","call","setColor","velocity","model","Point","acceleration","ZERO","collisionCircle","updateView","lastReceivedEntityDescription","updatePosition","speedFactor","gameClock","gameTick","theta","noise","angle","speed","cos","sin","translatePoint","limit","multiply","clone","tempColor","that","clearTimeout","timeout","setTimeout","originalColor","dealloc","constructEntityDescription","setCollisionCircle","aCollisionCircle","setDelegate","setPosition","setRadius","collisionMask","collisionGroup","getCollisionCircle","aColor","getColor","getOriginalColor","extend","GameEntity","setupCAAT","setupStats","caatDirector","caatScene","Scene","Director","initialize","addScene","delta","timeline","render","container","document","createElement","Stats","domElement","style","top","appendChild","body","anEntityView","addChild","removeChild","id","getElementById","canvas","director","destroy","AbstractGame","setupView","nickname","locateUpdateFailedCount","Error","ClientNetChannel","getEntities","forEach","key","entity","input","addMessageToQueue","CMDS","PLAYER_UPDATE","renderAtTime","CLIENT_SETTING","INTERP","FAKE_LAG","tick","renderTime","cmdBuffer","getIncomingWorldUpdateBuffer","len","length","newPosition","newRotation","maxInterpolationDistance","maxInterpSQ","nextWED","previousWED","i","forceUpdate","currentWED","durationBetweenPoints","offsetTime","activeEntities","t","entityPositionPast","entityRotationPast","entityPositionFuture","entityRotationFuture","getEntityWithid","createEntityFromDesc","previousEntityDescription","objectForKey","rotation","getDistanceSquared","updateEntity","EXPIRED_ENTITY_CHECK_RATE","removeExpiredEntities","payload","aNickname","PLAYER_JOINED","animationLoop","isRunning","requestAnimationFrame","stopGameClock","setupNetChannel","setupCmdMap","Controller","FieldController","intervalGameTick","intervalFramerate","intervalTargetDelta","NaN","gameDuration","Number","MAX_VALUE","cmdMap","oldTime","Date","getTime","floor","setInterval","clearInterval"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 4f39c0f83186576d87a3","/**\n File:\n DemoAppConstants.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS - Demo\n Abstract:\n This class contains Constants used by the DemoApp in RealtimeMultiplayerGame\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n var clientDropWait = RealtimeMultiplayerGame.Constants.CL_DEFAULT_MAXRATE\n\n Version:\n 1.0\n */\n module.exports = function(){\n     class Constants {\n         \n     }\n    Constants.ENTITY_DEFAULT_RADIUS = 8;\n    Constants.GAME_WIDTH = 700;\n    Constants.GAME_HEIGHT = 450;\n    Constants.MAX_CIRCLES = 100;\n    Constants.GAME_DURATION = 1000 * 300;\n    Constants.UNKNOWN = 1 << 0;\n    Constants.GENERIC_CIRCLE = 1 << 1;\n    Constants.PLAYER_ENTITY = 1 << 2;\n    \n    Constants.ENTITY_TYPES = {\n        \n    }\n }\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoAppConstants.js","var DemoClientGame = require('./DemoCircles/DemoClientGame');\n\n(function () {\n    var onDocumentReady = function () {\n        var clientGame = new DemoClientGame();\n    };\n\n    window.addEventListener('load', onDocumentReady, false);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./js/main.js","var Constants = require('./DemoAppConstants');\nvar CircleEntity = require('./CircleEntity');\nvar DemoView = require('./DemoView');\nvar AbstractClientGame = require ('../core/AbstractClientGame');\n\n/**\n File:\n DemoServerGame\n Created By:\n Mario Gonzalez\n Project:\n DemoApp\n Abstract:\n This is a concrete server instance of our game\n Basic Usage:\n DemoServerGame = new DemoApp.DemoServerGame();\n DemoServerGame.start();\n DemoServerGame.explodeEveryone();\n Version:\n 1.0\n */\n\nexport default class DemoClientGame extends AbstractClientGame {\n\n    constructor() {\n        super();\n        this.startGameClock();\n        return this;\n    };\n\n\n    setupView() {\n        this.view = new DemoView();\n        this.view.insertIntoHTMLElementWithId(\"gamecontainer\");\n\n        super.setupView(this);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    tick() {\n        super.tick();\n        this.view.stats.update();\n        this.view.update(this.gameClockReal);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    createEntityFromDesc(entityDesc) {\n\n        var diameter = entityDesc.radius * 2;\n\n        // Create a view via CAAT\n        var aCircleView = new CAAT.ShapeActor();\n        aCircleView.create();\n        aCircleView.setSize(diameter, diameter);\n        aCircleView.setFillStyle(\"#\" + CAAT.Color.prototype.hsvToRgb((entityDesc.entityid * 15) % 360, 40, 99).toHex()); // Random color\n        aCircleView.setLocation(entityDesc.x, entityDesc.y); // Place in the center of the screen, use the director's width/height\n\n        var newEntity = null;\n\n        var isOwnedByMe = entityDesc.clientid == this.netChannel.clientid;\n        // If this is a player entity\n        if (entityDesc.entityType & Constants.ENTITY_TYPES.PLAYER_ENTITY) {\n            newEntity = new PlayerEntity(entityDesc.entityid, entityDesc.clientid);\n\n            // If it is a player entity and it's my player entity - attach a KeyboardInputTrait to it\n            if (isOwnedByMe) {\n                newEntity.addTraitAndExecute(new RealtimeMultiplayerGame.controller.traits.KeyboardInputTrait());\n                this.clientCharacter = newEntity;\n            }\n        } else {\n            newEntity = new CircleEntity(entityDesc.entityid, entityDesc.clientid);\n        }\n\n        newEntity.position.set(entityDesc.x, entityDesc.y);\n        newEntity.setView(aCircleView);\n\n        this.fieldController.addEntity(newEntity);\n    };\n\n    /**\n     * Called by the ClientNetChannel, it sends us an array containing tightly packed values and expects us to return a meaningful object\n     * It is left up to each game to implement this function because only the game knows what it needs to send.\n     * However the 4 example projects in RealtimeMultiplayerNodeJS offer should be used ans examples\n     *\n     * @param {Array} entityDescAsArray An array of tightly packed values\n     * @return {Object} An object which will be returned to you later on tied to a specific entity\n     */\n    parseEntityDescriptionArray(entityDescAsArray) {\n        var entityDescription = {};\n\n        // It is left upto each game to implement this function because only the game knows what it needs to send.\n        // However the 4 example projects in RealtimeMultiplayerNodeJS offer this an example\n        entityDescription.entityid = entityDescAsArray[0];\n        entityDescription.clientid = entityDescAsArray[1];\n        entityDescription.entityType = +entityDescAsArray[2];\n        entityDescription.x = +entityDescAsArray[3];\n        entityDescription.y = +entityDescAsArray[4];\n        entityDescription.radius = +entityDescAsArray[5];\n        entityDescription.color = entityDescAsArray[6];\n        return entityDescription;\n    };\n\n    /**\n     * @inheritDoc\n     */\n    netChannelDidConnect(messageData) {\n        super.netChannelDidConnect(messageData);\n        this.log(\"this: Joining Game\");\n        this.joinGame(\"Player\" + this.netChannel.getClientid()); // Automatically join the game with some name\n    };\n\n    /**\n     * @inheritDoc\n     */\n    netChannelDidDisconnect(messageData) {\n        super.netChannelDidDisconnect(messageData);\n        this.log(\"netChannelDidDisconnect\");\n    };\n\n    /**\n     * This function logs something to the right panel\n     * @param {Object} An object in the form of: { message: ['Client', 'domReady'] }\n     */\n    log(msg) {\n        console.log(\"DemoClientGame: \" + msg);\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoClientGame.js","var Constants = require('./DemoAppConstants');\n\n/**\n File:\n DemoApp.CircleEntity\n Created By:\n Mario Gonzalez\n Project:\n DemoApp\n Abstract:\n This is the base entity for the demo game\n Basic Usage:\n\n Version:\n 1.0\n */\n(function () {\n\n    var nOffset = Math.random() * 2000;\n    DemoApp.CircleEntity = function (anEntityid, aClientid) {\n        DemoApp.CircleEntity.superclass.constructor.call(this, anEntityid, aClientid);\n\n        this.setColor(\"FFFFFF\");\n        this.velocity = new RealtimeMultiplayerGame.model.Point(0, 0);\n        this.acceleration = new RealtimeMultiplayerGame.model.Point(0, 0);\n        return this;\n    };\n\n    DemoApp.CircleEntity.prototype = {\n        radius: Constants.ENTITY_DEFAULT_RADIUS,\n        velocity: RealtimeMultiplayerGame.model.Point.prototype.ZERO,\n        acceleration: RealtimeMultiplayerGame.model.Point.prototype.ZERO,\n        collisionCircle: null,\t\t\t\t\t\t\t\t\t\t// An instance of RealtimeMultiplayerGame.modules.circlecollision.PackedCircle\n        entityType: Constants.GENERIC_CIRCLE,\n\n        /**\n         * Update the entity's view - this is only called on the clientside\n         */\n        updateView: function () {\n            if (!this.view) return;\n            this.view.x = this.position.x - this.radius;\n            this.view.y = this.position.y - this.radius;\n\n            var diameter = this.lastReceivedEntityDescription.radius * 2;\n            this.view.setSize(diameter, diameter);\n            this.view.setFillStyle(\"#\" + this.lastReceivedEntityDescription.color);\n        },\n\n        /**\n         * Update position of this entity - this is only called on the serverside\n         * @param {Number} speedFactor    A number signifying how much faster or slower we are moving than the target framerate\n         * @param {Number} gameClock    Current game time in seconds (zero based)\n         * @param {Number} gameTick        Current game tick (incrimented each frame)\n         */\n        updatePosition: function (speedFactor, gameClock, gameTick) {\n\n            // Modify velocity using perlin noise\n            var theta = 0.008;\n\n            var noise = RealtimeMultiplayerGame.model.noise(nOffset + this.position.x * theta, nOffset + this.position.y * theta, gameTick * 0.003);\n            var angle = noise * 12;\n            var speed = 0.2;\n            this.acceleration.x += Math.cos(angle) * speed - 0.3;\n            this.acceleration.y -= Math.sin(angle) * speed;\n\n\n            this.velocity.translatePoint(this.acceleration);\n            this.velocity.limit(5);\n            this.velocity.multiply(0.9);\n            this.acceleration.set(0, 0);\n            this.collisionCircle.position.translatePoint(this.velocity);\n            this.position = this.collisionCircle.position.clone();\n        },\n\n        tempColor: function () {\n            var that = this;\n\n            clearTimeout(this.timeout);\n            this.color = \"FF0000\";\n            this.timeout = setTimeout(function () {\n                that.setColor(that.originalColor);\n            }, 50);\n        },\n\n        /**\n         * Deallocate memory\n         */\n        dealloc: function () {\n            this.collisionCircle.dealloc();\n            this.collisionCircle = null;\n            DemoApp.CircleEntity.superclass.dealloc.call(this);\n        },\n\n        constructEntityDescription: function () {\n            return DemoApp.CircleEntity.superclass.constructEntityDescription.call(this) + ',' + this.radius + ',' + this.color;\n        },\n\n        ///// ACCESSORS\n        /**\n         * Set the CollisionCircle for this game entity.\n         * @param aCollisionCircle\n         */\n        setCollisionCircle: function (aCollisionCircle) {\n            this.collisionCircle = aCollisionCircle;\n            this.collisionCircle.setDelegate(this);\n            this.collisionCircle.setPosition(this.position.clone());\n            this.collisionCircle.setRadius(this.radius);\n            this.collisionCircle.collisionMask = 1;\n            this.collisionCircle.collisionGroup = 1;\n        },\n        getCollisionCircle: function () {\n            return this.collisionCircle\n        },\n\n        /**\n         * Set the color of this entity, a property originalColor is also stored\n         * @param aColor\n         */\n        setColor: function (aColor) {\n            if (!this.originalColor) {\n                this.originalColor = aColor;\n            }\n\n            this.color = aColor;\n        },\n        getColor: function () {\n            return this.color\n        },\n        getOriginalColor: function () {\n            return this.originalColor\n        }\n    };\n\n    // extend RealtimeMultiplayerGame.model.GameEntity\n    RealtimeMultiplayerGame.extend(DemoApp.CircleEntity, RealtimeMultiplayerGame.model.GameEntity, null);\n})();\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/CircleEntity.js","var Constants = require('./DemoAppConstants');\n/**\n File:\n AbstractServerGame.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n This class is the base Game controller in RealtimeMultiplayerGame on the server side.\n It provides things such as dropping players, and contains a ServerNetChannel\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n\n (function(){\n\t\tMyGameClass = function() {\n\t\t\treturn this;\n \t\t}\n\n\t\tRealtimeMultiplayerGame.extend(MyGameClass, RealtimeMultiplayerGame.AbstractServerGame, null);\n\t};\n Version:\n 1.0\n */\nexport default class DemoView {\n    constructor() {\n        this.setupCAAT();\n        this.setupStats();\n        this.caatDirector = null;\t\t\t\t// CAAT Director instance\n        this.caatScene = null;\t\t\t\t// CAAT Scene instance\n        this.stats = null;\t\t\t\t// Stats.js instance\n    };\n\n\n    // Methods\n    setupCAAT() {\n        this.caatScene = new CAAT.Scene(); // Create a scene, all directors must have at least one scene - this is where all your stuff goes\n        this.caatScene.create();\t// Notice we call create when creating this, and ShapeActor below. Both are Actors\n        this.caatScene.setFillStyle('#000000');\n\n        this.caatDirector = new CAAT.Director().initialize(Constants.GAME_WIDTH, Constants.GAME_HEIGHT); // Create the director instance\n        this.caatDirector.addScene(this.caatScene); // Immediately add the scene once it's created\n\n        // Start the render loop, with at 60FPS\n//\t\t\tthis.caatDirector.loop(60);\n    }\n\n    /**\n     * Updates our current view, passing along the current actual time (via Date().getTime());\n     * @param {Number} gameClockReal The current actual time, according to the game\n     */\n    update(gameClockReal) {\n        var delta = gameClockReal - this.caatDirector.timeline;\n        this.caatDirector.render(delta);\n        this.caatDirector.timeline = gameClockReal;\n    }\n\n    /**\n     * Creates a Stats.js instance and adds it to the page\n     */\n    setupStats() {\n        var container = document.createElement('div');\n        this.stats = new Stats();\n        this.stats.domElement.style.position = 'absolute';\n        this.stats.domElement.style.top = '0px';\n        container.appendChild(this.stats.domElement);\n        document.body.appendChild(container);\n    }\n\n    addEntity(anEntityView) {\n        console.log(\"Adding Entity To CAAT\", anEntityView);\n        this.caatScene.addChild(anEntityView);\n    }\n\n    removeEntity(anEntityView) {\n        console.log(\"Removing Entity From CAAT\", anEntityView);\n        this.caatScene.removeChild(anEntityView);\n    }\n\n    /**\n     * Insert the CAATDirector canvas into an HTMLElement\n     * @param {String} id An HTMLElement id\n     */\n    insertIntoHTMLElementWithId(id) {\n        document.getElementById(id).appendChild(this.caatDirector.canvas);\n    }\n\n    // Memory\n    dealloc() {\n        this.director.destroy();\n    }\n}\n\n\n\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoView.js","var AbstractGame = require('../core/AbstractGame');\n\n/**\n File:\n AbstractClientGame.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n This class is the client side base Game controller\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n\n (function(){\n\t\tMyGameClass = function() {\n\t\t\treturn this;\n \t\t}\n\n\t\tRealtimeMultiplayerGame.extend(MyGameClass, RealtimeMultiplayerGame.AbstractGame, null);\n\t};\n */\nexport default class AbstractClientGame extends AbstractGame {\n\n    constructor() {\n        super();\n        this.setupView();\n        this.view = null;\t\t\t\t\t\t\t// View\n        this.clientCharacter = null;\t\t\t\t// Reference to this users character\n        this.nickname = '';\t\t\t\t\t\t\t// User 'nickname'\n        this.locateUpdateFailedCount = 0;\n        return this;\n    };\n\n\n    // Methods\n    /**\n     * Setup the view\n     * RealtimeMultiplayerNodeJS is agnostic any rendering method\n     */\n    setupView() {\n        if (this.view === null) {  // If this is called, then user has not overwritten this function\n            throw new Error(\"RealtimeMultiplayerGame.AbstractClientGame.setupView - Override this method, then call MyClientGame.superclass.setupView()\");\n        }\n        this.fieldController.setView(this.view);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setupNetChannel() {\n        super.setupNetChannel();\n        this.netChannel = new RealtimeMultiplayerGame.ClientNetChannel(this);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setupCmdMap() {\n        super.setupCmdMap();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    tick() {\n        super.tick();\n\n        // Allow all entities to update their position\n        this.fieldController.getEntities().forEach(function (key, entity) {\n            entity.updateView();\n        }, this);\n\n        // Continuously queue information about our input - which will be sent to the server by netchannel\n        if (this.clientCharacter != null) {\n            var input = this.clientCharacter.constructEntityDescription();\n            this.netChannel.addMessageToQueue(false, RealtimeMultiplayerGame.Constants.CMDS.PLAYER_UPDATE, input);\n        }\n\n        // Draw the gameworld\n        this.renderAtTime(this.gameClock - RealtimeMultiplayerGame.Constants.CLIENT_SETTING.INTERP - RealtimeMultiplayerGame.Constants.CLIENT_SETTING.FAKE_LAG);\n        this.netChannel.tick();\n    }\n\n    /**\n     * Renders back in time between two previously received messages allowing for packet-loss, and a smooth simulation\n     * @param renderTime\n     */\n    renderAtTime(renderTime) {\n        var cmdBuffer = this.netChannel.getIncomingWorldUpdateBuffer(),\n            len = cmdBuffer.length;\n\n        // Need atleast 2 updates to render between\n        if (len < 2) return;\n        var newPosition = new RealtimeMultiplayerGame.model.Point(0, 0),\n            newRotation = 0.0;\n\n        // if the distance between prev and next is too great - don't interpolate\n        var maxInterpolationDistance = 150,\n            maxInterpSQ = maxInterpolationDistance * maxInterpolationDistance;\n\n        // Store the next world-entity-description before and after the desired render time\n        var nextWED = null,\n            previousWED = null;\n\n        // Loop through the points, until we find the first one that has a timeValue which is greater than our renderTime\n        // Knowing that then we know that the combined with the one before it - that passed our just check - we know we want to render ourselves somehwere between these two points\n        var i = 0;\n        var forceUpdate = false;\n        while (++i < len) {\n            var currentWED = cmdBuffer[i];\n\n            // We fall between this \"currentWorldEntityDescription\", and the last one we just checked\n            if (currentWED.gameClock >= renderTime) {\n                previousWED = cmdBuffer[i - 1];\n                nextWED = currentWED;\n                this.locateUpdateFailedCount = 0;\n                break;\n            }\n\n            // Have no found a matching update for a while - the client is way behind the server, set our time to the time of the last udpate we received\n//\t\t\t\tif(i === len -1) {\n//\t\t\t\t\tif(++this.locateUpdateFailedCount === RealtimeMultiplayerGame.Constants.CLIENT_SETTING.MAX_UPDATE_FAILURE_COUNT) {\n//\t\t\t\t\t\tthis.gameClock = currentWED.gameClock;\n//\t\t\t\t\t\tthis.gameTick = currentWED.gameTick;\n//\t\t\t\t\t\tpreviousWED = cmdBuffer[i-1];\n//\t\t\t\t\t\tnextWED = currentWED;\n//\t\t\t\t\t}\n//\t\t\t\t}\n        }\n\n        // Could not find two points to render between\n        if (nextWED == null || previousWED == null) {\n            console.log(\"GIVE UP\")\n            return false;\n        }\n\n        /**\n         * More info: http://www.learningiphone.com/2010/09/consicely-animate-an-object-along-a-path-sensitive-to-time/\n         * Find T in the time value between the points:\n         *\n         * durationBetweenPoints: Amount of time between the timestamp in both points\n         * offset: Figure out what our time would be if we pretended the previousBeforeTime.time was 0.00 by subtracting it from us\n         * t: Now that we have a zero based offsetTime, and a maximum time that is also zero based (durationBetweenPoints)\n         * we can easily figure out what offsetTime / duration.\n         *\n         * Example values: timeValue = 5.0f, nextPointTime = 10.0f, lastPointTime = 4.0f\n         * result:\n         * duration = 6.0f\n         * offsetTime = 1.0f\n         * t = 0.16\n         */\n        var durationBetweenPoints = (nextWED.gameClock - previousWED.gameClock);\n        var offsetTime = renderTime - previousWED.gameClock;\n        var activeEntities = {};\n\n        // T is where we fall between, as a function of these two points\n        var t = offsetTime / (nextWED.gameClock - previousWED.gameClock);\n        if (t > 1.0) t = 1.0;\n        else if (t < 0) t = 0.0;\n\n        // Note: We want to render at time \"B\", so grab the position at time \"A\" (previous), and time \"C\"(next)\n        var entityPositionPast = new RealtimeMultiplayerGame.model.Point(0, 0),\n            entityRotationPast = 0;\n\n        var entityPositionFuture = new RealtimeMultiplayerGame.model.Point(0, 0),\n            entityRotationFuture = 0;\n\n        // Update players\n        nextWED.forEach(function (key, entityDesc) {\n            // Catch garbage values\n            var entityid = entityDesc.entityid;\n            var entity = this.fieldController.getEntityWithid(entityid);\n\n            // We don't have this entity - create it!\n            if (!entity) {\n                this.createEntityFromDesc(entityDesc);\n            }\n            else {\n                // We already have this entity - update it\n                var previousEntityDescription = previousWED.objectForKey(entityid);\n\n                // Could not find info for this entity in previous description\n                // This can happen if this is this entities first frame in the game\n                if (!previousEntityDescription) return;\n\n                // Store past and future positions to compare\n                entityPositionPast.set(previousEntityDescription.x, previousEntityDescription.y);\n                entityRotationPast = previousEntityDescription.rotation;\n\n                entityPositionFuture.set(entityDesc.x, entityDesc.y);\n                entityRotationFuture = entityDesc.rotation;\n\n                // if the distance between prev and next is too great - don't interpolate\n                if (entityPositionPast.getDistanceSquared(entityPositionFuture) > maxInterpSQ) {\n                    t = 1;\n                }\n\n                // Interpolate the objects position by multiplying the Delta times T, and adding the previous position\n                newPosition.x = ( (entityPositionFuture.x - entityPositionPast.x) * t ) + entityPositionPast.x;\n                newPosition.y = ( (entityPositionFuture.y - entityPositionPast.y) * t ) + entityPositionPast.y;\n                newRotation = ( (entityRotationFuture - entityRotationPast) * t ) + entityRotationPast;\n            }\n\n            // Update the entity with the new information, and insert it into the activeEntities array\n            this.fieldController.updateEntity(entityid, newPosition, newRotation, entityDesc);\n            activeEntities[entityid] = true;\n\n        }, this);\n\n\n        // Destroy removed entities, every N frames\n        if (this.gameTick % RealtimeMultiplayerGame.Constants.CLIENT_SETTING.EXPIRED_ENTITY_CHECK_RATE === 0)\n            this.fieldController.removeExpiredEntities(activeEntities);\n    }\n\n\n    /**\n     * Create an enitity using the information provided\n     * @param {Object} entityDesc An object containing information such as 'entityid', 'clientid' and usually position information atleast\n     */\n    createEntityFromDesc(entityDesc) {\n        // OVERRIDE\n    }\n\n    /**\n     * Called by the ClientNetChannel, it sends us an array containing tightly packed values and expects us to return a meaningful object\n     * It is left up to each game to implement this function because only the game knows what it needs to send.\n     * However the 4 example projects in RealtimeMultiplayerNodeJS offer should be used ans examples\n     *\n     * @param {Array} entityDescAsArray An array of tightly packed values\n     * @return {Object} An object which will be returned to you later on tied to a specific entity\n     */\n//\t\tparseEntityDescriptionArray: function(entityDescAsArray)\n//\t\t{\n//\t\t\t// This is left in as an example, copy paste this into your AbstractClientGame subclass and modify from there\n//\t\t\tvar entityDescription = {};\n//\n//\t\t\t// It is left upto each game to implement this function because only the game knows what it needs to send.\n//\t\t\t// However the 4 example projects in RealtimeMultiplayerNodeJS offer this an example\n////\t\t\tentityDescription.entityid = +entityDescAsArray[0];\n////\t\t\tentityDescription.clientid = +entityDescAsArray[1];\n////\t\t\tentityDescription.entityType = +entityDescAsArray[2];\n////\t\t\tentityDescription.x = +entityDescAsArray[3];\n////\t\t\tentityDescription.y = +entityDescAsArray[4];\n////\t\t\tentityDescription.radius = +entityDescAsArray[5];\n////\t\t\tentityDescription.rotation = +entityDescAsArray[6];\n//\n//\t\t\treturn entityDescription;\n//\t\t},\n\n//////\tClientNetChannelDelegate\n    /**\n     * ClientNetChannel has connected via socket.io to server for first time\n     * Join the game\n     * @param messageData\n     */\n    netChannelDidConnect(messageData) {\n        // Sync time with server\n        this.gameClock = messageData.payload.gameClock;\n    }\n\n\n    /**\n     * Called when the user has entered a name, and wants to join the match\n     * @param aNickname\n     */\n    joinGame(aNickname) {\n        this.nickname = aNickname;\n        // Create a 'join' message and queue it in ClientNetChannel\n        this.netChannel.addMessageToQueue(true, RealtimeMultiplayerGame.Constants.CMDS.PLAYER_JOINED, {nickname: this.nickname});\n    }\n\n\n    /**\n     * Start/Restart the game tick\n     */\n    startGameClock() {\n        var that = this;\n        (function animationLoop() {\n            that.tick();\n\n            if (that.isRunning)\n                requestAnimationFrame(animationLoop);\n        })()\n    }\n\n    /**\n     * Called by NetChannel when it receives a command if it decides not to intercept it.\n     * (For example CMDS.FULL_UPDATE is always intercepted, so it never calls this function, but CMDS.SERVER_MATCH_START is not intercepted so this function triggered)\n     * @param messageData\n     */\n    netChannelDidReceiveMessage(messageData) {\n        // OVERRIDE\n    }\n\n    netChannelDidDisconnect() {\n        this.isRunning = false;\n        this.stopGameClock();\n    }\n\n\n    ///// Memory\n    dealloc() {\n        if (this.view) this.view.dealloc();\n        this.view = null;\n\n        super.dealloc();\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./js/core/AbstractClientGame.js","/**\n File:\n AbstractGame.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n This class is the base Game controller in RealtimeMultiplayerGame it provides things such as, keeping track of the current game clock, starting and stopping the game clock\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n\n (function(){\n\t\tMyGameClass = function() {\n\t\t\treturn this;\n \t\t}\n\n\t\tRealtimeMultiplayerGame.extend(MyGameClass, RealtimeMultiplayerGame.AbstractGame, null);\n\t};\n */\n\nexport default class AbstractGame {\n\n    constructor() {\n        this.setupNetChannel();\n        this.setupCmdMap();\n        this.fieldController = new RealtimeMultiplayerGame.Controller.FieldController();\n\n        // Properties\n        this.gameClockReal = 0;\t\t\t\t\t\t\t\t\t\t\t// Actual time via \"new Date().getTime();\"\n        this.gameClock = 0;\t\t\t\t\t\t\t\t\t\t\t// Seconds since start\n        this.gameTick = 0;\t\t\t\t\t\t\t\t\t\t\t// Ticks since start\n        this.isRunning = true;\n        this.speedFactor = 1;\t\t\t\t\t\t\t\t\t\t\t// Used to create Framerate Independent Motion (FRIM) - 1.0 means running at exactly the correct speed, 0.5 means half-framerate. (otherwise faster machines which can update themselves more accurately will have an advantage)\n        this.intervalGameTick = null;\t\t\t\t\t\t\t\t\t\t\t// Setinterval for gametick\n        this.intervalFramerate = 60;\t\t\t\t\t\t\t\t\t\t\t// Try to call our tick function this often, intervalFramerate, is used to determin how often to call settimeout - we can set to lower numbers for slower computers\n        this.intervalTargetDelta = NaN;\t// this.targetDelta, milliseconds between frames. Normally it is 16ms or 60FPS. The framerate the game is designed against - used to create framerate independent motion\n        this.gameDuration = Number.MAX_VALUE;\t\t\t\t\t\t\t\t// Gameduration\n\n        this.netChannel = null;\t\t\t\t\t\t\t\t\t\t\t// ServerNetChannel / ClientNetChannel determined by subclass\n        this.fieldController = null;\t\t\t\t\t\t\t\t\t\t\t// FieldController\n        this.cmdMap = {};\n\n        return this;\n    };\n\n\n\n    /**\n     * Setup the ClientNetChannel or ServerNetChannel\n     */\n    setupNetChannel() {\n    }\n\n    /**\n     * setup the command mapping for the events recevied from netchannel\n     */\n    setupCmdMap() {\n    }\n\n    // Methods\n    tick() {\n        // Store previous time and update current\n        var oldTime = this.gameClockReal;\n        this.gameClockReal = new Date().getTime();\n\n        // Our clock is zero based, so if for example it says 10,000 - that means the game started 10 seconds ago\n        var delta = this.gameClockReal - oldTime;\n        this.gameClock += delta;\n        this.gameTick++;\n\n        // Framerate Independent Motion -\n        // 1.0 means running at exactly the correct speed, 0.5 means half-framerate. (otherwise faster machines which can update themselves more accurately will have an advantage)\n        this.speedFactor = delta / ( this.intervalTargetDelta );\n        if (this.speedFactor <= 0) this.speedFactor = 1;\n\n        this.fieldController.tick(this.speedFactor, this.gameClockReal, this.gameTick);\n    }\n\n\n    /**\n     * Start/Restart the game tick\n     */\n    startGameClock() {\n        var that = this;\n        this.gameClockReal = new Date().getTime();\n        this.intervalTargetDelta = Math.floor(1000 / this.intervalFramerate);\n        this.intervalGameTick = setInterval(function () {\n            that.tick()\n        }, this.intervalTargetDelta);\n    }\n\n    /**\n     * Stop the game tick\n     */\n    stopGameClock() {\n        clearInterval(this.intervalGameTick);\n        clearTimeout(this.intervalGameTick);\n    }\n\n    setGameDuration() {\n    }\n\n    // Memory\n    dealloc() {\n        if (this.netChannel) this.netChannel.dealloc();\n        this.netChannel = null;\n\n        clearInterval(this.intervalGameTick);\n    }\n\n    log() {\n        // OVERRIDE or USE CONSOLE.LOG\n    }\n\n    ///// Accessors\n    getGameClock() {\n        return this.gameClock;\n    }\n\n    getGameTick() {\n        return this.gameTick;\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./js/core/AbstractGame.js"],"sourceRoot":""}