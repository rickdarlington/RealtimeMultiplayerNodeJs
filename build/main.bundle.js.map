{"version":3,"sources":["webpack:///webpack/bootstrap 23023e36603435b423f9","webpack:///./js/main.js","webpack:///./js/DemoCircles/DemoClientGame.js","webpack:///./js/DemoCircles/DemoAppConstants.js","webpack:///./js/DemoCircles/CircleEntity.js"],"names":["WEB_SOCKET_SWF_LOCATION","onDocumentReady","clientGame","window","addEventListener","DemoClientGame","startGameClock","view","DemoApp","DemoView","insertIntoHTMLElementWithId","stats","update","gameClockReal","entityDesc","diameter","radius","aCircleView","CAAT","ShapeActor","create","setSize","setFillStyle","Color","prototype","hsvToRgb","entityid","toHex","setLocation","x","y","newEntity","isOwnedByMe","clientid","netChannel","entityType","ENTITY_TYPES","PLAYER_ENTITY","PlayerEntity","addTraitAndExecute","RealtimeMultiplayerGame","controller","traits","KeyboardInputTrait","clientCharacter","position","set","setView","fieldController","addEntity","entityDescAsArray","entityDescription","color","messageData","log","joinGame","getClientid","msg","console","AbstractClientGame","Constants","ENTITY_DEFAULT_RADIUS","GAME_WIDTH","GAME_HEIGHT","MAX_CIRCLES","GAME_DURATION","UNKNOWN","GENERIC_CIRCLE","nOffset","Math","random","CircleEntity","anEntityid","aClientid","superclass","constructor","call","setColor","velocity","model","Point","acceleration","ZERO","collisionCircle","updateView","lastReceivedEntityDescription","updatePosition","speedFactor","gameClock","gameTick","theta","noise","angle","speed","cos","sin","translatePoint","limit","multiply","clone","tempColor","that","clearTimeout","timeout","setTimeout","originalColor","dealloc","constructEntityDescription","setCollisionCircle","aCollisionCircle","setDelegate","setPosition","setRadius","collisionMask","collisionGroup","getCollisionCircle","aColor","getColor","getOriginalColor","extend","GameEntity"],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;AC7DA;;;;;;AAEA,CAAC,YAAY;AACT,QAAIA,0BAA0B,KAA9B;AACA;AACA,QAAIC,kBAAkB,SAAlBA,eAAkB,GAAY;AAC9B,YAAIC,aAAa,8BAAjB;AACH,KAFD;;AAIA;AACAC,WAAOC,gBAAP,CAAwB,MAAxB,EAAgCH,eAAhC,EAAiD,KAAjD;AACH,CATD,I;;;;;;;;;;;;;;;;;ACFA;;;;AACA;;;;;;;;;;;;AAEA;;;;;;;;;;;;;;;;;IAiBqBI,c;;;AAEjB,8BAAc;AAAA;;AAAA;;AAAA;;AAEV,cAAKC,cAAL;AACA;AACH;;;;oCAGW;AACR,iBAAKC,IAAL,GAAY,IAAIC,QAAQC,QAAZ,EAAZ;AACA,iBAAKF,IAAL,CAAUG,2BAAV,CAAsC,eAAtC;;AAEA,sIAAgB,IAAhB;AACH;;;;;AAED;;;+BAGO;AACH;AACA,iBAAKH,IAAL,CAAUI,KAAV,CAAgBC,MAAhB;AACA,iBAAKL,IAAL,CAAUK,MAAV,CAAiB,KAAKC,aAAtB;AACH;;;;;AAED;;;6CAGqBC,U,EAAY;;AAE7B,gBAAIC,WAAWD,WAAWE,MAAX,GAAoB,CAAnC;;AAEA;AACA,gBAAIC,cAAc,IAAIC,KAAKC,UAAT,EAAlB;AACAF,wBAAYG,MAAZ;AACAH,wBAAYI,OAAZ,CAAoBN,QAApB,EAA8BA,QAA9B;AACAE,wBAAYK,YAAZ,CAAyB,MAAMJ,KAAKK,KAAL,CAAWC,SAAX,CAAqBC,QAArB,CAA+BX,WAAWY,QAAX,GAAsB,EAAvB,GAA6B,GAA3D,EAAgE,EAAhE,EAAoE,EAApE,EAAwEC,KAAxE,EAA/B,EAR6B,CAQoF;AACjHV,wBAAYW,WAAZ,CAAwBd,WAAWe,CAAnC,EAAsCf,WAAWgB,CAAjD,EAT6B,CASwB;;AAErD,gBAAIC,YAAY,IAAhB;;AAEA,gBAAIC,cAAclB,WAAWmB,QAAX,IAAuB,KAAKC,UAAL,CAAgBD,QAAzD;AACA;AACA,gBAAInB,WAAWqB,UAAX,GAAwB,2BAAUC,YAAV,CAAuBC,aAAnD,EAAkE;AAC9DN,4BAAY,IAAIO,YAAJ,CAAiBxB,WAAWY,QAA5B,EAAsCZ,WAAWmB,QAAjD,CAAZ;;AAEA;AACA,oBAAID,WAAJ,EAAiB;AACbD,8BAAUQ,kBAAV,CAA6B,IAAIC,wBAAwBC,UAAxB,CAAmCC,MAAnC,CAA0CC,kBAA9C,EAA7B;AACA,yBAAKC,eAAL,GAAuBb,SAAvB;AACH;AACJ,aARD,MAQO;AACHA,4BAAY,2BAAiBjB,WAAWY,QAA5B,EAAsCZ,WAAWmB,QAAjD,CAAZ;AACH;;AAEDF,sBAAUc,QAAV,CAAmBC,GAAnB,CAAuBhC,WAAWe,CAAlC,EAAqCf,WAAWgB,CAAhD;AACAC,sBAAUgB,OAAV,CAAkB9B,WAAlB;;AAEA,iBAAK+B,eAAL,CAAqBC,SAArB,CAA+BlB,SAA/B;AACH;;;;;AAED;;;;;;;;oDAQ4BmB,iB,EAAmB;AAC3C,gBAAIC,oBAAoB,EAAxB;;AAEA;AACA;AACAA,8BAAkBzB,QAAlB,GAA6BwB,kBAAkB,CAAlB,CAA7B;AACAC,8BAAkBlB,QAAlB,GAA6BiB,kBAAkB,CAAlB,CAA7B;AACAC,8BAAkBhB,UAAlB,GAA+B,CAACe,kBAAkB,CAAlB,CAAhC;AACAC,8BAAkBtB,CAAlB,GAAsB,CAACqB,kBAAkB,CAAlB,CAAvB;AACAC,8BAAkBrB,CAAlB,GAAsB,CAACoB,kBAAkB,CAAlB,CAAvB;AACAC,8BAAkBnC,MAAlB,GAA2B,CAACkC,kBAAkB,CAAlB,CAA5B;AACAC,8BAAkBC,KAAlB,GAA0BF,kBAAkB,CAAlB,CAA1B;AACA,mBAAOC,iBAAP;AACH;;;;;AAED;;;6CAGqBE,W,EAAa;AAC9B,iJAA2BA,WAA3B;AACA,iBAAKC,GAAL,CAAS,oBAAT;AACA,iBAAKC,QAAL,CAAc,WAAW,KAAKrB,UAAL,CAAgBsB,WAAhB,EAAzB,EAH8B,CAG2B;AAC5D;;;;;AAED;;;gDAGwBH,W,EAAa;AACjC,oJAA8BA,WAA9B;AACA,iBAAKC,GAAL,CAAS,yBAAT;AACH;;;;;AAED;;;;4BAIIG,G,EAAK;AACLC,oBAAQJ,GAAR,CAAY,qBAAqBG,GAAjC;AACH;;;;EA3GuCjB,wBAAwBmB,kB;;kBAA/CtD,c;;;;;;;;;;;;;;;ACpBrB;;;;;;;;;;;;;;;;IAgBqBuD,S;;;;kBAAAA,S;;AAErBA,UAAUC,qBAAV,GAAkC,CAAlC;AACAD,UAAUE,UAAV,GAAuB,GAAvB;AACAF,UAAUG,WAAV,GAAwB,GAAxB;AACAH,UAAUI,WAAV,GAAwB,GAAxB;AACAJ,UAAUK,aAAV,GAA0B,OAAO,GAAjC;;AAEAL,UAAUxB,YAAV,GAAyB;AACrB8B,WAAS,KAAK,CADO;AAErBC,kBAAgB,KAAK,CAFA;AAGrB9B,iBAAe,KAAK;AAHC,CAAzB,C;;;;;;;;;ACxBA;;;;;;;;;;;;;;AAcA,CAAC,YAAY;;AAET,QAAI+B,UAAUC,KAAKC,MAAL,KAAgB,IAA9B;AACA9D,YAAQ+D,YAAR,GAAuB,UAAUC,UAAV,EAAsBC,SAAtB,EAAiC;AACpDjE,gBAAQ+D,YAAR,CAAqBG,UAArB,CAAgCC,WAAhC,CAA4CC,IAA5C,CAAiD,IAAjD,EAAuDJ,UAAvD,EAAmEC,SAAnE;;AAEA,aAAKI,QAAL,CAAc,QAAd;AACA,aAAKC,QAAL,GAAgB,IAAItC,wBAAwBuC,KAAxB,CAA8BC,KAAlC,CAAwC,CAAxC,EAA2C,CAA3C,CAAhB;AACA,aAAKC,YAAL,GAAoB,IAAIzC,wBAAwBuC,KAAxB,CAA8BC,KAAlC,CAAwC,CAAxC,EAA2C,CAA3C,CAApB;AACA,eAAO,IAAP;AACH,KAPD;;AASAxE,YAAQ+D,YAAR,CAAqB/C,SAArB,GAAiC;AAC7BR,gBAAQR,QAAQoD,SAAR,CAAkBC,qBADG;AAE7BiB,kBAAUtC,wBAAwBuC,KAAxB,CAA8BC,KAA9B,CAAoCxD,SAApC,CAA8C0D,IAF3B;AAG7BD,sBAAczC,wBAAwBuC,KAAxB,CAA8BC,KAA9B,CAAoCxD,SAApC,CAA8C0D,IAH/B;AAI7BC,yBAAiB,IAJY,EAIG;AAChChD,oBAAY3B,QAAQoD,SAAR,CAAkBxB,YAAlB,CAA+B+B,cALd;;AAO7B;;;AAGAiB,oBAAY,sBAAY;AACpB,gBAAI,CAAC,KAAK7E,IAAV,EAAgB;AAChB,iBAAKA,IAAL,CAAUsB,CAAV,GAAc,KAAKgB,QAAL,CAAchB,CAAd,GAAkB,KAAKb,MAArC;AACA,iBAAKT,IAAL,CAAUuB,CAAV,GAAc,KAAKe,QAAL,CAAcf,CAAd,GAAkB,KAAKd,MAArC;;AAEA,gBAAID,WAAW,KAAKsE,6BAAL,CAAmCrE,MAAnC,GAA4C,CAA3D;AACA,iBAAKT,IAAL,CAAUc,OAAV,CAAkBN,QAAlB,EAA4BA,QAA5B;AACA,iBAAKR,IAAL,CAAUe,YAAV,CAAuB,MAAM,KAAK+D,6BAAL,CAAmCjC,KAAhE;AACH,SAlB4B;;AAoB7B;;;;;;AAMAkC,wBAAgB,wBAAUC,WAAV,EAAuBC,SAAvB,EAAkCC,QAAlC,EAA4C;;AAExD;AACA,gBAAIC,QAAQ,KAAZ;;AAEA,gBAAIC,QAAQnD,wBAAwBuC,KAAxB,CAA8BY,KAA9B,CAAoCvB,UAAU,KAAKvB,QAAL,CAAchB,CAAd,GAAkB6D,KAAhE,EAAuEtB,UAAU,KAAKvB,QAAL,CAAcf,CAAd,GAAkB4D,KAAnG,EAA0GD,WAAW,KAArH,CAAZ;AACA,gBAAIG,QAAQD,QAAQ,EAApB;AACA,gBAAIE,QAAQ,GAAZ;AACA,iBAAKZ,YAAL,CAAkBpD,CAAlB,IAAuBwC,KAAKyB,GAAL,CAASF,KAAT,IAAkBC,KAAlB,GAA0B,GAAjD;AACA,iBAAKZ,YAAL,CAAkBnD,CAAlB,IAAuBuC,KAAK0B,GAAL,CAASH,KAAT,IAAkBC,KAAzC;;AAGA,iBAAKf,QAAL,CAAckB,cAAd,CAA6B,KAAKf,YAAlC;AACA,iBAAKH,QAAL,CAAcmB,KAAd,CAAoB,CAApB;AACA,iBAAKnB,QAAL,CAAcoB,QAAd,CAAuB,GAAvB;AACA,iBAAKjB,YAAL,CAAkBnC,GAAlB,CAAsB,CAAtB,EAAyB,CAAzB;AACA,iBAAKqC,eAAL,CAAqBtC,QAArB,CAA8BmD,cAA9B,CAA6C,KAAKlB,QAAlD;AACA,iBAAKjC,QAAL,GAAgB,KAAKsC,eAAL,CAAqBtC,QAArB,CAA8BsD,KAA9B,EAAhB;AACH,SA5C4B;;AA8C7BC,mBAAW,qBAAY;AACnB,gBAAIC,OAAO,IAAX;;AAEAC,yBAAa,KAAKC,OAAlB;AACA,iBAAKnD,KAAL,GAAa,QAAb;AACA,iBAAKmD,OAAL,GAAeC,WAAW,YAAY;AAClCH,qBAAKxB,QAAL,CAAcwB,KAAKI,aAAnB;AACH,aAFc,EAEZ,EAFY,CAAf;AAGH,SAtD4B;;AAwD7B;;;AAGAC,iBAAS,mBAAY;AACjB,iBAAKvB,eAAL,CAAqBuB,OAArB;AACA,iBAAKvB,eAAL,GAAuB,IAAvB;AACA3E,oBAAQ+D,YAAR,CAAqBG,UAArB,CAAgCgC,OAAhC,CAAwC9B,IAAxC,CAA6C,IAA7C;AACH,SA/D4B;;AAiE7B+B,oCAA4B,sCAAY;AACpC,mBAAOnG,QAAQ+D,YAAR,CAAqBG,UAArB,CAAgCiC,0BAAhC,CAA2D/B,IAA3D,CAAgE,IAAhE,IAAwE,GAAxE,GAA8E,KAAK5D,MAAnF,GAA4F,GAA5F,GAAkG,KAAKoC,KAA9G;AACH,SAnE4B;;AAqE7B;AACA;;;;AAIAwD,4BAAoB,4BAAUC,gBAAV,EAA4B;AAC5C,iBAAK1B,eAAL,GAAuB0B,gBAAvB;AACA,iBAAK1B,eAAL,CAAqB2B,WAArB,CAAiC,IAAjC;AACA,iBAAK3B,eAAL,CAAqB4B,WAArB,CAAiC,KAAKlE,QAAL,CAAcsD,KAAd,EAAjC;AACA,iBAAKhB,eAAL,CAAqB6B,SAArB,CAA+B,KAAKhG,MAApC;AACA,iBAAKmE,eAAL,CAAqB8B,aAArB,GAAqC,CAArC;AACA,iBAAK9B,eAAL,CAAqB+B,cAArB,GAAsC,CAAtC;AACH,SAjF4B;AAkF7BC,4BAAoB,8BAAY;AAC5B,mBAAO,KAAKhC,eAAZ;AACH,SApF4B;;AAsF7B;;;;AAIAN,kBAAU,kBAAUuC,MAAV,EAAkB;AACxB,gBAAI,CAAC,KAAKX,aAAV,EAAyB;AACrB,qBAAKA,aAAL,GAAqBW,MAArB;AACH;;AAED,iBAAKhE,KAAL,GAAagE,MAAb;AACH,SAhG4B;AAiG7BC,kBAAU,oBAAY;AAClB,mBAAO,KAAKjE,KAAZ;AACH,SAnG4B;AAoG7BkE,0BAAkB,4BAAY;AAC1B,mBAAO,KAAKb,aAAZ;AACH;AAtG4B,KAAjC;;AAyGA;AACAjE,4BAAwB+E,MAAxB,CAA+B/G,QAAQ+D,YAAvC,EAAqD/B,wBAAwBuC,KAAxB,CAA8ByC,UAAnF,EAA+F,IAA/F;AACH,CAvHD,I","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 23023e36603435b423f9","import DemoClientGame from './DemoCircles/DemoClientGame';\n\n(function () {\n    var WEB_SOCKET_SWF_LOCATION = \"ABC\";\n    // Callback for when browse is ready\n    var onDocumentReady = function () {\n        var clientGame = new DemoClientGame();\n    };\n\n    // Listen for ready\n    window.addEventListener('load', onDocumentReady, false);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./js/main.js","import Constants from './DemoAppConstants';\nimport CircleEntity from './CircleEntity';\n\n/**\n File:\n DemoServerGame\n Created By:\n Mario Gonzalez\n Project:\n DemoApp\n Abstract:\n This is a concrete server instance of our game\n Basic Usage:\n DemoServerGame = new DemoApp.DemoServerGame();\n DemoServerGame.start();\n DemoServerGame.explodeEveryone();\n Version:\n 1.0\n */\n\nexport default class DemoClientGame extends RealtimeMultiplayerGame.AbstractClientGame {\n\n    constructor() {\n        super();\n        this.startGameClock();\n        return this;\n    };\n\n\n    setupView() {\n        this.view = new DemoApp.DemoView();\n        this.view.insertIntoHTMLElementWithId(\"gamecontainer\");\n\n        super.setupView(this);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    tick() {\n        super.tick();\n        this.view.stats.update();\n        this.view.update(this.gameClockReal);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    createEntityFromDesc(entityDesc) {\n\n        var diameter = entityDesc.radius * 2;\n\n        // Create a view via CAAT\n        var aCircleView = new CAAT.ShapeActor();\n        aCircleView.create();\n        aCircleView.setSize(diameter, diameter);\n        aCircleView.setFillStyle(\"#\" + CAAT.Color.prototype.hsvToRgb((entityDesc.entityid * 15) % 360, 40, 99).toHex()); // Random color\n        aCircleView.setLocation(entityDesc.x, entityDesc.y); // Place in the center of the screen, use the director's width/height\n\n        var newEntity = null;\n\n        var isOwnedByMe = entityDesc.clientid == this.netChannel.clientid;\n        // If this is a player entity\n        if (entityDesc.entityType & Constants.ENTITY_TYPES.PLAYER_ENTITY) {\n            newEntity = new PlayerEntity(entityDesc.entityid, entityDesc.clientid);\n\n            // If it is a player entity and it's my player entity - attach a KeyboardInputTrait to it\n            if (isOwnedByMe) {\n                newEntity.addTraitAndExecute(new RealtimeMultiplayerGame.controller.traits.KeyboardInputTrait());\n                this.clientCharacter = newEntity;\n            }\n        } else {\n            newEntity = new CircleEntity(entityDesc.entityid, entityDesc.clientid);\n        }\n\n        newEntity.position.set(entityDesc.x, entityDesc.y);\n        newEntity.setView(aCircleView);\n\n        this.fieldController.addEntity(newEntity);\n    };\n\n    /**\n     * Called by the ClientNetChannel, it sends us an array containing tightly packed values and expects us to return a meaningful object\n     * It is left up to each game to implement this function because only the game knows what it needs to send.\n     * However the 4 example projects in RealtimeMultiplayerNodeJS offer should be used ans examples\n     *\n     * @param {Array} entityDescAsArray An array of tightly packed values\n     * @return {Object} An object which will be returned to you later on tied to a specific entity\n     */\n    parseEntityDescriptionArray(entityDescAsArray) {\n        var entityDescription = {};\n\n        // It is left upto each game to implement this function because only the game knows what it needs to send.\n        // However the 4 example projects in RealtimeMultiplayerNodeJS offer this an example\n        entityDescription.entityid = entityDescAsArray[0];\n        entityDescription.clientid = entityDescAsArray[1];\n        entityDescription.entityType = +entityDescAsArray[2];\n        entityDescription.x = +entityDescAsArray[3];\n        entityDescription.y = +entityDescAsArray[4];\n        entityDescription.radius = +entityDescAsArray[5];\n        entityDescription.color = entityDescAsArray[6];\n        return entityDescription;\n    };\n\n    /**\n     * @inheritDoc\n     */\n    netChannelDidConnect(messageData) {\n        super.netChannelDidConnect(messageData);\n        this.log(\"this: Joining Game\");\n        this.joinGame(\"Player\" + this.netChannel.getClientid()); // Automatically join the game with some name\n    };\n\n    /**\n     * @inheritDoc\n     */\n    netChannelDidDisconnect(messageData) {\n        super.netChannelDidDisconnect(messageData);\n        this.log(\"netChannelDidDisconnect\");\n    };\n\n    /**\n     * This function logs something to the right panel\n     * @param {Object} An object in the form of: { message: ['Client', 'domReady'] }\n     */\n    log(msg) {\n        console.log(\"DemoClientGame: \" + msg);\n    }\n\n}\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoClientGame.js","/**\n File:\n DemoAppConstants.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS - Demo\n Abstract:\n This class contains Constants used by the DemoApp in RealtimeMultiplayerGame\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n var clientDropWait = RealtimeMultiplayerGame.Constants.CL_DEFAULT_MAXRATE\n\n Version:\n 1.0\n */\nexport default class Constants {\n}\nConstants.ENTITY_DEFAULT_RADIUS = 8;\nConstants.GAME_WIDTH = 700;\nConstants.GAME_HEIGHT = 450;\nConstants.MAX_CIRCLES = 100;\nConstants.GAME_DURATION = 1000 * 300;\n\nConstants.ENTITY_TYPES = {\n    UNKNOWN: 1 << 0,\n    GENERIC_CIRCLE: 1 << 1,\n    PLAYER_ENTITY: 1 << 2\n}\n\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoAppConstants.js","/**\n File:\n DemoApp.CircleEntity\n Created By:\n Mario Gonzalez\n Project:\n DemoApp\n Abstract:\n This is the base entity for the demo game\n Basic Usage:\n\n Version:\n 1.0\n */\n(function () {\n\n    var nOffset = Math.random() * 2000;\n    DemoApp.CircleEntity = function (anEntityid, aClientid) {\n        DemoApp.CircleEntity.superclass.constructor.call(this, anEntityid, aClientid);\n\n        this.setColor(\"FFFFFF\");\n        this.velocity = new RealtimeMultiplayerGame.model.Point(0, 0);\n        this.acceleration = new RealtimeMultiplayerGame.model.Point(0, 0);\n        return this;\n    };\n\n    DemoApp.CircleEntity.prototype = {\n        radius: DemoApp.Constants.ENTITY_DEFAULT_RADIUS,\n        velocity: RealtimeMultiplayerGame.model.Point.prototype.ZERO,\n        acceleration: RealtimeMultiplayerGame.model.Point.prototype.ZERO,\n        collisionCircle: null,\t\t\t\t\t\t\t\t\t\t// An instance of RealtimeMultiplayerGame.modules.circlecollision.PackedCircle\n        entityType: DemoApp.Constants.ENTITY_TYPES.GENERIC_CIRCLE,\n\n        /**\n         * Update the entity's view - this is only called on the clientside\n         */\n        updateView: function () {\n            if (!this.view) return;\n            this.view.x = this.position.x - this.radius;\n            this.view.y = this.position.y - this.radius;\n\n            var diameter = this.lastReceivedEntityDescription.radius * 2;\n            this.view.setSize(diameter, diameter);\n            this.view.setFillStyle(\"#\" + this.lastReceivedEntityDescription.color);\n        },\n\n        /**\n         * Update position of this entity - this is only called on the serverside\n         * @param {Number} speedFactor    A number signifying how much faster or slower we are moving than the target framerate\n         * @param {Number} gameClock    Current game time in seconds (zero based)\n         * @param {Number} gameTick        Current game tick (incrimented each frame)\n         */\n        updatePosition: function (speedFactor, gameClock, gameTick) {\n\n            // Modify velocity using perlin noise\n            var theta = 0.008;\n\n            var noise = RealtimeMultiplayerGame.model.noise(nOffset + this.position.x * theta, nOffset + this.position.y * theta, gameTick * 0.003);\n            var angle = noise * 12;\n            var speed = 0.2;\n            this.acceleration.x += Math.cos(angle) * speed - 0.3;\n            this.acceleration.y -= Math.sin(angle) * speed;\n\n\n            this.velocity.translatePoint(this.acceleration);\n            this.velocity.limit(5);\n            this.velocity.multiply(0.9);\n            this.acceleration.set(0, 0);\n            this.collisionCircle.position.translatePoint(this.velocity);\n            this.position = this.collisionCircle.position.clone();\n        },\n\n        tempColor: function () {\n            var that = this;\n\n            clearTimeout(this.timeout);\n            this.color = \"FF0000\";\n            this.timeout = setTimeout(function () {\n                that.setColor(that.originalColor);\n            }, 50);\n        },\n\n        /**\n         * Deallocate memory\n         */\n        dealloc: function () {\n            this.collisionCircle.dealloc();\n            this.collisionCircle = null;\n            DemoApp.CircleEntity.superclass.dealloc.call(this);\n        },\n\n        constructEntityDescription: function () {\n            return DemoApp.CircleEntity.superclass.constructEntityDescription.call(this) + ',' + this.radius + ',' + this.color;\n        },\n\n        ///// ACCESSORS\n        /**\n         * Set the CollisionCircle for this game entity.\n         * @param aCollisionCircle\n         */\n        setCollisionCircle: function (aCollisionCircle) {\n            this.collisionCircle = aCollisionCircle;\n            this.collisionCircle.setDelegate(this);\n            this.collisionCircle.setPosition(this.position.clone());\n            this.collisionCircle.setRadius(this.radius);\n            this.collisionCircle.collisionMask = 1;\n            this.collisionCircle.collisionGroup = 1;\n        },\n        getCollisionCircle: function () {\n            return this.collisionCircle\n        },\n\n        /**\n         * Set the color of this entity, a property originalColor is also stored\n         * @param aColor\n         */\n        setColor: function (aColor) {\n            if (!this.originalColor) {\n                this.originalColor = aColor;\n            }\n\n            this.color = aColor;\n        },\n        getColor: function () {\n            return this.color\n        },\n        getOriginalColor: function () {\n            return this.originalColor\n        }\n    };\n\n    // extend RealtimeMultiplayerGame.model.GameEntity\n    RealtimeMultiplayerGame.extend(DemoApp.CircleEntity, RealtimeMultiplayerGame.model.GameEntity, null);\n})();\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/CircleEntity.js"],"sourceRoot":""}