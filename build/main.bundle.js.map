{"version":3,"sources":["webpack:///webpack/bootstrap f80308ae79bf137df49e","webpack:///./js/DemoCircles/DemoAppConstants.js","webpack:///./js/model/Point.js","webpack:///./js/main.js","webpack:///./js/DemoCircles/DemoClientGame.js","webpack:///./js/DemoCircles/CircleEntity.js","webpack:///./js/model/GameEntity.js","webpack:///./js/model/ImprovedNoise.js","webpack:///./js/DemoCircles/DemoView.js","webpack:///./js/core/AbstractClientGame.js","webpack:///./js/core/AbstractGame.js","webpack:///./js/controller/FieldController.js","webpack:///./js/lib/SortedLookupTable.js","webpack:///./js/network/ClientNetChannel.js","webpack:///./js/model/Constants.js","webpack:///./js/model/NetChannelMessage.js"],"names":["module","exports","Constants","ENTITY_DEFAULT_RADIUS","GAME_WIDTH","GAME_HEIGHT","MAX_CIRCLES","GAME_DURATION","UNKNOWN","GENERIC_CIRCLE","PLAYER_ENTITY","ENTITY_TYPES","Point","xpos","ypos","x","y","p","set","aPoint","RealtimeMultiplayerGame","model","factor","angle","Math","cos","sin","len","getLength","length","multiply","atan2","max","aLenthSquared","getLengthSquared","aLength","sqrt","lengthSquared","point","deltaX","deltaY","String","round","floor","DemoClientGame","require","onDocumentReady","clientGame","window","addEventListener","CircleEntity","DemoView","AbstractClientGame","setupView","startGameClock","view","insertIntoHTMLElementWithId","stats","update","gameClockReal","entityDesc","diameter","radius","aCircleView","CAAT","ShapeActor","create","setSize","setFillStyle","Color","prototype","hsvToRgb","entityid","toHex","setLocation","newEntity","isOwnedByMe","clientid","netChannel","entityType","PlayerEntity","addTraitAndExecute","controller","traits","KeyboardInputTrait","clientCharacter","position","setView","fieldController","addEntity","entityDescAsArray","entityDescription","color","messageData","log","joinGame","getClientid","msg","console","GameEntity","Noise","anEntityid","aClientid","nOffset","random","setColor","velocity","acceleration","lastReceivedEntityDescription","speedFactor","gameClock","gameTick","theta","noise","speed","translatePoint","limit","collisionCircle","clone","that","clearTimeout","timeout","setTimeout","originalColor","dealloc","call","aCollisionCircle","setDelegate","setPosition","setRadius","collisionMask","collisionGroup","aColor","ZERO","rotation","wantsFullUpdate","returnString","aTrait","existingVersionOfTrait","getTraitWithName","displayName","canStack","removeTraitWithName","push","attach","wasAdded","addTrait","execute","aTraitName","removedTraits","i","splice","detach","removeAllTraits","aView","trait","ImprovedNoise","t","a","b","hash","z","h","u","v","n","floorX","floorY","floorZ","X","Y","Z","xMinus1","yMinus1","zMinus1","fade","w","A","AA","AB","B","BA","BB","lerp","grad","setupCAAT","setupStats","caatScene","Scene","caatDirector","Director","initialize","addScene","delta","timeline","render","container","document","createElement","Stats","domElement","style","top","appendChild","body","anEntityView","addChild","removeChild","id","getElementById","canvas","director","destroy","AbstractGame","ClientNetChannel","setupNetChannel","nickname","locateUpdateFailedCount","Error","getEntities","forEach","key","entity","updateView","input","constructEntityDescription","addMessageToQueue","CMDS","PLAYER_UPDATE","renderAtTime","CLIENT_SETTING","INTERP","FAKE_LAG","tick","renderTime","cmdBuffer","getIncomingWorldUpdateBuffer","newPosition","newRotation","maxInterpolationDistance","maxInterpSQ","nextWED","previousWED","forceUpdate","currentWED","durationBetweenPoints","offsetTime","activeEntities","entityPositionPast","entityRotationPast","entityPositionFuture","entityRotationFuture","getEntityWithid","createEntityFromDesc","previousEntityDescription","objectForKey","getDistanceSquared","updateEntity","EXPIRED_ENTITY_CHECK_RATE","removeExpiredEntities","payload","aNickname","PLAYER_JOINED","animationLoop","isRunning","requestAnimationFrame","stopGameClock","FieldController","setupCmdMap","intervalGameTick","intervalFramerate","intervalTargetDelta","NaN","gameDuration","Number","MAX_VALUE","cmdMap","oldTime","Date","getTime","setInterval","clearInterval","SortedLookupTable","entities","players","anEntity","setObjectForKey","getView","newEntityDescription","aPlayerEntity","player","removeEntity","remove","entityKeysArray","_keys","totalRemoved","isPlayer","removePlayer","LookupTable","_data","nextUUID","value","hasOwnProperty","block","context","keys","data","index","_indexOf","d","NetChannelMessage","aDelegate","delegate","socketio","cl_updateRate","CMD_RATE","latency","lastSentTime","lastRecievedTime","messageBuffer","outgoingSequenceNumber","incomingWorldUpdateBuffer","reliableBuffer","setupSocketIO","io","SERVER_SETTING","GET_URI","on","onSocketConnect","obj","onSocketDidAcceptConnection","onSocketDisconnect","SERVER_FULL_UPDATE","onServerWorldUpdate","arguments","aNetChannelMessage","cmd","SERVER_CONNECT","netChannelDidConnect","onSocketMessage","lastReceivedTime","getGameClock","adjustRate","messageIndex","seq","MAX_BUFFER","message","netChannelDidDisconnect","connection","hasReliableMessages","firstUnreliableMessageFound","isReliable","sendMessage","canSendMessage","nextUnreliable","singleWorldUpdate","worldEntityDescription","createWorldEntityDescriptionFromString","shift","aWorldUpdateMessage","worldDescription","allEntities","split","allEntitiesLen","parseEntityDescriptionArray","aMessageInstance","undefined","connected","messageTime","json","send","CLIENT_NETCHANNEL_DEBUG","aCommandConstant","DEBUG_SETTING","serverMessage","deltaTime","close","isReady","SERVER_NETCHANNEL_DEBUG","CLIENT_ID","SOCKET_PROTOCOL","SOCKET_DOMAIN","SOCKET_PORT","UPDATE_RATE","MAX_UPDATE_FAILURE_COUNT","SERVER_MATCH_START","SERVER_END_GAME","PLAYER_CONNECT","PLAYER_DISCONNECT","INPUT_BITMASK","UP","DOWN","LEFT","RIGHT","SPACE","SHIFT","TAB","aSequenceNumber","aCommandType","aPayload","sequenceNumber","cmds","unencodedMessage"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap f80308ae79bf137df49e","/**\n File:\n DemoAppConstants.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS - Demo\n Abstract:\n This class contains Constants used by the DemoApp in RealtimeMultiplayerGame\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n var clientDropWait = RealtimeMultiplayerGame.Constants.CL_DEFAULT_MAXRATE\n\n Version:\n 1.0\n */\n module.exports = function(){\n    class Constants {\n        \n    }\n    Constants.ENTITY_DEFAULT_RADIUS = 8;\n    Constants.GAME_WIDTH = 700;\n    Constants.GAME_HEIGHT = 450;\n    Constants.MAX_CIRCLES = 100;\n    Constants.GAME_DURATION = 1000 * 300;\n    Constants.UNKNOWN = 1 << 0;\n    Constants.GENERIC_CIRCLE = 1 << 1;\n    Constants.PLAYER_ENTITY = 1 << 2;\n    \n    Constants.ENTITY_TYPES = {\n        \n    }\n }\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoAppConstants.js","/**\n * @author  Hyperandroid  ||  http://hyperandroid.com/\n *\n * Hold a 2D point information.\n * Think about the possibility of turning CAAT.Point into {x:,y:}.\n *\n * (This is stolen from Hyperandroid's CAAT)\n **/\nclass Point {\n\n    /**\n     *\n     * A point defined by two coordinates.\n     *\n     * @param xpos {number}\n     * @param ypos {number}\n     *\n     * @constructor\n     */\n    constructor (xpos, ypos) {\n        this.x = xpos || 0;\n        this.y = ypos || 0;\n        return this;\n    }\n\n    set(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n    /**\n     * Create a new RealtimeMultiplayerGame.model.Point equal to this one.\n     * @return {RealtimeMultiplayerGame.model.Point}\n     */\n    clone() {\n        var p = new Point();\n        p.set(this.x, this.y);\n        return p;\n    }\n    /**\n     * Translate this point to another position. The final point will be (point.x+x, point.y+y)\n     * @param x {number}\n     * @param y {number}\n     *\n     * @return this\n     */\n    translate(x, y) {\n        this.x += x;\n        this.y += y;\n\n        return this;\n    }\n    /**\n     * Translate this point to another point.\n     * @param aPoint {RealtimeMultiplayerGame.model.Point}\n     * @return this\n     */\n    translatePoint(aPoint) {\n        this.x += aPoint.x;\n        this.y += aPoint.y;\n        return this;\n    }\n    /**\n     * Substract a point from this one.\n     * @param aPoint {RealtimeMultiplayerGame.model.Point}\n     * @return this\n     */\n    subtract(aPoint) {\n        this.x -= aPoint.x;\n        this.y -= aPoint.y;\n        return this;\n    }\n\n    /**\n     * Substract a point from this one\n     * Returns a new point with the difference\n     * @param aPoint {RealtimeMultiplayerGame.model.Point}\n     * @return {RealtimeMultiplayerGame.model.Point}\n     */\n    subtractClone(aPoint) {\n        return new RealtimeMultiplayerGame.model.Point(this.x - aPoint.x, this.y - aPoint.y)\n    }\n\n    /**\n     * Multiply this point by a scalar.\n     * @param factor {number}\n     * @return this\n     */\n    multiply(factor) {\n        this.x *= factor;\n        this.y *= factor;\n        return this;\n    }\n    /**\n     * Rotate this point by an angle. The rotation is held by (0,0) coordinate as center.\n     * @param angle {number}\n     * @return this\n     */\n    rotate(angle) {\n        var x = this.x, y = this.y;\n        this.x = x * Math.cos(angle) - Math.sin(angle) * y;\n        this.y = x * Math.sin(angle) + Math.cos(angle) * y;\n        return this;\n    }\n    /**\n     *\n     * @param angle {number}\n     * @return this\n     */\n    setAngle(angle) {\n        var len = this.getLength();\n        this.x = Math.cos(angle) * len;\n        this.y = Math.sin(angle) * len;\n        return this;\n    }\n    /**\n     *\n     * @param length {number}\n     * @return this\n     */\n    setLength(length) {\n        var len = this.getLength();\n        if (len)this.multiply(length / len);\n        else this.x = this.y = length;\n        return this;\n    }\n    /**\n     * Normalize this point, that is, both set coordinates proportionally to values raning 0..1\n     * @return this\n     */\n    normalize() {\n        var len = this.getLength();\n        this.x /= len;\n        this.y /= len;\n        return this;\n    }\n    /**\n     * Return the angle from -Pi to Pi of this point.\n     * @return {number}\n     */\n    getAngle() {\n        return Math.atan2(this.y, this.x);\n    }\n    /**\n     * Set this point coordinates proportinally to a maximum value.\n     * @param max {number}\n     * @return this\n     */\n    limit(max) {\n        var aLenthSquared = this.getLengthSquared();\n        if (aLenthSquared + 0.01 > max * max) {\n            var aLength = Math.sqrt(aLenthSquared);\n            this.x = (this.x / aLength) * max;\n            this.y = (this.y / aLength) * max;\n        }\n        return this;\n    }\n    /**\n     * Get this point's lenght.\n     * @return {number}\n     */\n    getLength() {\n        var length = Math.sqrt(this.x * this.x + this.y * this.y);\n        if (length < 0.005 && length > -0.005) return 0.000001;\n        return length;\n\n    }\n    /**\n     * Get this point's squared length.\n     * @return {number}\n     */\n    getLengthSquared() {\n        var lengthSquared = this.x * this.x + this.y * this.y;\n        if (lengthSquared < 0.005 && lengthSquared > -0.005) return 0;\n        return lengthSquared;\n    }\n    /**\n     * Get the distance between two points.\n     * @param point {RealtimeMultiplayerGame.model.Point}\n     * @return {number}\n     */\n    getDistance(point) {\n        var deltaX = this.x - point.x;\n        var deltaY = this.y - point.y;\n        return Math.sqrt((deltaX * deltaX) + (deltaY * deltaY));\n    }\n    /**\n     * Get the squared distance between two points.\n     * @param point {RealtimeMultiplayerGame.model.Point}\n     * @return {number}\n     */\n    getDistanceSquared(point) {\n        var deltaX = this.x - point.x;\n        var deltaY = this.y - point.y;\n        return (deltaX * deltaX) + (deltaY * deltaY);\n    }\n    /**\n     * Get a string representation.\n     * @return {string}\n     */\n    toString() {\n        return \"(RealtimeMultiplayerGame.model.Point)\" +\n            \" x:'\" + String(Math.round(Math.floor(this.x * 10)) / 10) +\n            \" y:\" + String(Math.round(Math.floor(this.y * 10)) / 10);\n    }\n    \n    ZERO() {\n        return new Point(0,0);\n    }\n}\n\nmodule.exports = Point;\n\n\n// WEBPACK FOOTER //\n// ./js/model/Point.js","var DemoClientGame = require('./DemoCircles/DemoClientGame');\n\n(function () {\n    var onDocumentReady = function () {\n        var clientGame = new DemoClientGame();\n    };\n\n    window.addEventListener('load', onDocumentReady, false);\n})();\n\n\n\n// WEBPACK FOOTER //\n// ./js/main.js","var Constants = require('./DemoAppConstants');\nvar CircleEntity = require('./CircleEntity');\nvar DemoView = require('./DemoView');\nvar AbstractClientGame = require('../core/AbstractClientGame');\n\n/**\n File:\n DemoServerGame\n Created By:\n Mario Gonzalez\n Project:\n DemoApp\n Abstract:\n This is a concrete server instance of our game\n Basic Usage:\n DemoServerGame = new DemoApp.DemoServerGame();\n DemoServerGame.start();\n DemoServerGame.explodeEveryone();\n Version:\n 1.0\n */\n\nclass DemoClientGame extends AbstractClientGame {\n\n    constructor() {\n        super();\n        this.setupView();\n        this.startGameClock();\n        return this;\n    };\n\n\n    setupView() {\n        this.view = new DemoView();\n        this.view.insertIntoHTMLElementWithId(\"gamecontainer\");\n\n        super.setupView(this);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    tick() {\n        super.tick();\n        this.view.stats.update();\n        this.view.update(this.gameClockReal);\n    };\n\n    /**\n     * @inheritDoc\n     */\n    createEntityFromDesc(entityDesc) {\n\n        var diameter = entityDesc.radius * 2;\n\n        // Create a view via CAAT\n        var aCircleView = new CAAT.ShapeActor();\n        aCircleView.create();\n        aCircleView.setSize(diameter, diameter);\n        aCircleView.setFillStyle(\"#\" + CAAT.Color.prototype.hsvToRgb((entityDesc.entityid * 15) % 360, 40, 99).toHex()); // Random color\n        aCircleView.setLocation(entityDesc.x, entityDesc.y); // Place in the center of the screen, use the director's width/height\n\n        var newEntity = null;\n\n        var isOwnedByMe = entityDesc.clientid == this.netChannel.clientid;\n        // If this is a player entity\n        if (entityDesc.entityType & Constants.ENTITY_TYPES.PLAYER_ENTITY) {\n            newEntity = new PlayerEntity(entityDesc.entityid, entityDesc.clientid);\n\n            // If it is a player entity and it's my player entity - attach a KeyboardInputTrait to it\n            if (isOwnedByMe) {\n                newEntity.addTraitAndExecute(new RealtimeMultiplayerGame.controller.traits.KeyboardInputTrait());\n                this.clientCharacter = newEntity;\n            }\n        } else {\n            newEntity = new CircleEntity(entityDesc.entityid, entityDesc.clientid);\n        }\n\n        newEntity.position.set(entityDesc.x, entityDesc.y);\n        newEntity.setView(aCircleView);\n\n        this.fieldController.addEntity(newEntity);\n    };\n\n    /**\n     * Called by the ClientNetChannel, it sends us an array containing tightly packed values and expects us to return a meaningful object\n     * It is left up to each game to implement this function because only the game knows what it needs to send.\n     * However the 4 example projects in RealtimeMultiplayerNodeJS offer should be used ans examples\n     *\n     * @param {Array} entityDescAsArray An array of tightly packed values\n     * @return {Object} An object which will be returned to you later on tied to a specific entity\n     */\n    parseEntityDescriptionArray(entityDescAsArray) {\n        var entityDescription = {};\n\n        // It is left upto each game to implement this function because only the game knows what it needs to send.\n        // However the 4 example projects in RealtimeMultiplayerNodeJS offer this an example\n        entityDescription.entityid = entityDescAsArray[0];\n        entityDescription.clientid = entityDescAsArray[1];\n        entityDescription.entityType = +entityDescAsArray[2];\n        entityDescription.x = +entityDescAsArray[3];\n        entityDescription.y = +entityDescAsArray[4];\n        entityDescription.radius = +entityDescAsArray[5];\n        entityDescription.color = entityDescAsArray[6];\n        return entityDescription;\n    };\n\n    /**\n     * @inheritDoc\n     */\n    netChannelDidConnect(messageData) {\n        super.netChannelDidConnect(messageData);\n        this.log(\"this: Joining Game\");\n        this.joinGame(\"Player\" + this.netChannel.getClientid()); // Automatically join the game with some name\n    };\n\n    /**\n     * @inheritDoc\n     */\n    netChannelDidDisconnect(messageData) {\n        super.netChannelDidDisconnect(messageData);\n        this.log(\"netChannelDidDisconnect\");\n    };\n\n    /**\n     * This function logs something to the right panel\n     * @param {Object} An object in the form of: { message: ['Client', 'domReady'] }\n     */\n    log(msg) {\n        console.log(\"DemoClientGame: \" + msg);\n    }\n\n}\n\nmodule.exports = DemoClientGame;\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoClientGame.js","var GameEntity = require('../model/GameEntity');\nvar Constants = require('./DemoAppConstants');\nvar Point = require('../model/Point');\nvar Noise = require('../model/ImprovedNoise');\n\n/**\n File:\n DemoApp.CircleEntity\n Created By:\n Mario Gonzalez\n Project:\n DemoApp\n Abstract:\n This is the base entity for the demo game\n Basic Usage:\n\n Version:\n 1.0\n */\nclass CircleEntity extends GameEntity {\n\n    constructor(anEntityid, aClientid) {\n        // radius: Constants.ENTITY_DEFAULT_RADIUS,\n        // velocity: RealtimeMultiplayerGame.model.Point.prototype.ZERO,\n        // acceleration: RealtimeMultiplayerGame.model.Point.prototype.ZERO,\n        // collisionCircle: null,\t\t\t\t\t\t\t\t\t\t// An instance of RealtimeMultiplayerGame.modules.circlecollision.PackedCircle\n        // entityType: Constants.GENERIC_CIRCLE,\n        super(anEntityid, aClientid);\n        this.nOffset = Math.random() * 2000;\n\n        this.setColor(\"FFFFFF\");\n        this.velocity = new Point(0, 0);\n        this.acceleration = new Point(0, 0);\n        return this;\n    }\n\n\n    /**\n     * Update the entity's view - this is only called on the clientside\n     */\n    updateView() {\n        if (!this.view) return;\n        this.view.x = this.position.x - this.radius;\n        this.view.y = this.position.y - this.radius;\n\n        var diameter = this.lastReceivedEntityDescription.radius * 2;\n        this.view.setSize(diameter, diameter);\n        this.view.setFillStyle(\"#\" + this.lastReceivedEntityDescription.color);\n    }\n\n    /**\n     * Update position of this entity - this is only called on the serverside\n     * @param {Number} speedFactor    A number signifying how much faster or slower we are moving than the target framerate\n     * @param {Number} gameClock    Current game time in seconds (zero based)\n     * @param {Number} gameTick        Current game tick (incrimented each frame)\n     */\n    updatePosition(speedFactor, gameClock, gameTick) {\n\n        // Modify velocity using perlin noise\n        var theta = 0.008;\n\n        var noise = new Noise(this.nOffset + this.position.x * theta, this.nOffset + this.position.y * theta, gameTick * 0.003);\n        var angle = noise * 12;\n        var speed = 0.2;\n        this.acceleration.x += Math.cos(angle) * speed - 0.3;\n        this.acceleration.y -= Math.sin(angle) * speed;\n\n\n        this.velocity.translatePoint(this.acceleration);\n        this.velocity.limit(5);\n        this.velocity.multiply(0.9);\n        this.acceleration.set(0, 0);\n        this.collisionCircle.position.translatePoint(this.velocity);\n        this.position = this.collisionCircle.position.clone();\n    }\n\n    tempColor() {\n        var that = this;\n\n        clearTimeout(this.timeout);\n        this.color = \"FF0000\";\n        this.timeout = setTimeout(function () {\n            that.setColor(that.originalColor);\n        }, 50);\n    }\n\n    /**\n     * Deallocate memory\n     */\n    dealloc() {\n        this.collisionCircle.dealloc();\n        this.collisionCircle = null;\n        //DemoApp.CircleEntity.superclass.dealloc.call(this);\n        super.dealloc();\n    }\n\n    constructEntityDescription() {\n        //return DemoApp.CircleEntity.superclass.constructEntityDescription.call(this) + ',' + this.radius + ',' + this.color;\n        super.constructEntityDescription.call(this.radius ,this.color);\n    }\n\n    ///// ACCESSORS\n    /**\n     * Set the CollisionCircle for this game entity.\n     * @param aCollisionCircle\n     */\n    setCollisionCircle(aCollisionCircle) {\n        this.collisionCircle = aCollisionCircle;\n        this.collisionCircle.setDelegate(this);\n        this.collisionCircle.setPosition(this.position.clone());\n        this.collisionCircle.setRadius(this.radius);\n        this.collisionCircle.collisionMask = 1;\n        this.collisionCircle.collisionGroup = 1;\n    }\n    getCollisionCircle() {\n        return this.collisionCircle\n    }\n\n    /**\n     * Set the color of this entity, a property originalColor is also stored\n     * @param aColor\n     */\n    setColor(aColor) {\n        if (!this.originalColor) {\n            this.originalColor = aColor;\n        }\n\n        this.color = aColor;\n    }\n    getColor() {\n        return this.color\n    }\n    getOriginalColor() {\n        return this.originalColor\n    }\n}\n\nmodule.exports = CircleEntity;\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/CircleEntity.js","var Point = require('./Point');\n\n/**\n File:\n GameEntity.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n This class is the base GameEntity class in RealtimeMultiplayerGame, it contains a position rotation, health\n Basic Usage:\n\n var badGuy = new RealtimeMultiplayerGame.GameEntity();\n badGuy.position.x += 1;\n */\nclass GameEntity {\n\n    constructor(anEntityid, aClientid) {\n        this.clientid = -1;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// Owner of this object\n        this.entityid = -1;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// UUID for this entity\n        this.entityType = -1;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// A special interger representing the entityType sent via along with other network info\n        this.position = new Point(0,0).ZERO;  \t\t// Current position of this entity\n        this.rotation = 0;\n        this.traits = null;\t\t\t\t\t\t\t\t\t\t\t\t\t\t// An array of our traits; in reverse added order\n        this.view = null;\n        this.lastReceivedEntityDescription = null;\t\t\t\t\t\t\t\t\t// The last received entity description (set by renderAtTime)\n        \n        this.clientid = aClientid;\n        this.entityid = anEntityid;\n        this.traits = [];\n        this.position = new Point(0, 0);\n        return this;\n    };\n\n    /**\n     * Update the view's position\n     */\n    updateView() {\n        // OVERRIDE\n    }\n\n    /**\n     * Updates the position of this GameEntity based on it's movement properties (velocity, acceleration, damping)\n     * @param {Number} speedFactor    A number signifying how much faster or slower we are moving than the target framerate\n     * @param {Number} gameClock    Current game time in seconds (zero based)\n     * @param {Number} gameTick        Current game tick (incrimented each frame)\n     */\n    updatePosition(speedFactor, gameClock, gameTick) {\n        // OVERRIDE\n    }\n\n    /**\n     * Construct an entity description for this object, it is essentually a CSV so you have to know how to read it on the receiving end\n     * @param wantsFullUpdate    If true, certain things that are only sent when changed are always sent\n     */\n    constructEntityDescription(gameTick, wantsFullUpdate) {\n        // Note: \"~~\" is just a way to round the value without the Math.round function call\n        var returnString = this.entityid;\n        returnString += \",\" + this.clientid;\n        returnString += \",\" + this.entityType;\n        returnString += \",\" + ~~this.position.x;\n        returnString += \",\" + ~~this.position.y;\n\n        return returnString;\n    }\n\n    ////// TRAIT SUPPORT\n    /**\n     * Adds and attaches a trait (already created), to this entity.\n     * The trait is only attached if we do not already have one of the same type attached, or don't care (aTrait.canStack = true)\n     * @param {RealtimeMultiplayerGame.controller.traits.BaseTrait} aTrait A BaseTrait instance\n     * @return {Boolean} Whether the trait was added\n     */\n    addTrait(aTrait) {\n        // Check if we already have this trait, if we do - make sure the trait allows stacking\n        var existingVersionOfTrait = this.getTraitWithName(aTrait.displayName);\n        if (existingVersionOfTrait && !existingVersionOfTrait.canStack) {\n            return false;\n        }\n\n        // Remove existing version\n        if (existingVersionOfTrait) {\n            this.removeTraitWithName(aTrait.displayName);\n        }\n\n\n        this.traits.push(aTrait);\n        aTrait.attach(this);\n\n        return aTrait;\n    }\n\n    /**\n     * Calls addTrait and executes it immediately\n     * @param aTrait\n     */\n    addTraitAndExecute(aTrait) {\n        var wasAdded = this.addTrait(aTrait);\n        if (wasAdded) {\n            aTrait.execute();\n            return aTrait;\n        }\n\n        return null;\n    }\n\n    /**\n     * Removes a trait with a matching .displayName property\n     * @param aTraitName\n     */\n    removeTraitWithName(aTraitName) {\n        var len = this.traits.length;\n        var removedTraits = null;\n        for (var i = 0; i < len; ++i) {\n            if (this.traits[i].displayName === aTraitName) {\n                removedTraits = this.traits.splice(i, 1);\n                break;\n            }\n        }\n\n        // Detach removed traits\n        if (removedTraits) {\n            i = removedTraits.length;\n            while (i--) {\n                removedTraits[i].detach();\n            }\n        }\n    }\n\n    /**\n     * Removes all traits contained in this entity\n     */\n    removeAllTraits() {\n        var i = this.traits.length;\n        while (i--) {\n            this.traits[i].detach();\n        }\n\n        this.traits = [];\n    }\n\n    ///// MEMORY\n    dealloc() {\n        this.position = null;\n        this.removeAllTraits();\n        this.traits = null;\n    }\n\n    ////// ACCESSORS\n    setView(aView) {\n        this.view = aView;\n    }\n    getView() {\n        return this.view;\n    }\n    /**\n     * Returns a trait with a matching .displayName property\n     * @param aTraitName\n     */\n    getTraitWithName(aTraitName) {\n        var len = this.traits.length;\n        var trait = null;\n        for (var i = 0; i < len; ++i) {\n            if (this.traits[i].displayName === aTraitName) {\n                trait = this.traits[i];\n                break;\n            }\n        }\n        return trait;\n    }\n}\n\nmodule.exports = GameEntity;\n\n\n// WEBPACK FOOTER //\n// ./js/model/GameEntity.js","// http://mrl.nyu.edu/~perlin/noise/\nclass ImprovedNoise {\n    constructor() {\n        var p = [151, 160, 137, 91, 90, 15, 131, 13, 201, 95, 96, 53, 194, 233, 7, 225, 140, 36, 103, 30, 69, 142, 8, 99, 37, 240, 21, 10,\n            23, 190, 6, 148, 247, 120, 234, 75, 0, 26, 197, 62, 94, 252, 219, 203, 117, 35, 11, 32, 57, 177, 33, 88, 237, 149, 56, 87,\n            174, 20, 125, 136, 171, 168, 68, 175, 74, 165, 71, 134, 139, 48, 27, 166, 77, 146, 158, 231, 83, 111, 229, 122, 60, 211,\n            133, 230, 220, 105, 92, 41, 55, 46, 245, 40, 244, 102, 143, 54, 65, 25, 63, 161, 1, 216, 80, 73, 209, 76, 132, 187, 208,\n            89, 18, 169, 200, 196, 135, 130, 116, 188, 159, 86, 164, 100, 109, 198, 173, 186, 3, 64, 52, 217, 226, 250, 124, 123, 5,\n            202, 38, 147, 118, 126, 255, 82, 85, 212, 207, 206, 59, 227, 47, 16, 58, 17, 182, 189, 28, 42, 223, 183, 170, 213, 119,\n            248, 152, 2, 44, 154, 163, 70, 221, 153, 101, 155, 167, 43, 172, 9, 129, 22, 39, 253, 19, 98, 108, 110, 79, 113, 224, 232,\n            178, 185, 112, 104, 218, 246, 97, 228, 251, 34, 242, 193, 238, 210, 144, 12, 191, 179, 162, 241, 81, 51, 145, 235, 249,\n            14, 239, 107, 49, 192, 214, 31, 181, 199, 106, 157, 184, 84, 204, 176, 115, 121, 50, 45, 127, 4, 150, 254, 138, 236, 205,\n            93, 222, 114, 67, 29, 24, 72, 243, 141, 128, 195, 78, 66, 215, 61, 156, 180];\n    \n        for (var i = 0; i < 256; i++) {\n    \n            p[256 + i] = p[i];\n    \n        }\n    }\n\n    fade(t) {\n\n        return t * t * t * (t * (t * 6 - 15) + 10);\n\n    }\n\n    lerp(t, a, b) {\n\n        return a + t * (b - a);\n\n    }\n\n    grad(hash, x, y, z) {\n\n        var h = hash & 15;\n        var u = h < 8 ? x : y, v = h < 4 ? y : h == 12 || h == 14 ? x : z;\n        return ((h & 1) == 0 ? u : -u) + ((h & 2) == 0 ? v : -v);\n\n    }\n}\n\nclass Noise extends ImprovedNoise {\n\n    constructor(x, y, z) {\n        super();\n        \n        var n = new ImprovedNoise();\n\n        var floorX = ~~x, floorY = ~~y, floorZ = ~~z;\n\n        var X = floorX & 255, Y = floorY & 255, Z = floorZ & 255;\n\n        x -= floorX;\n        y -= floorY;\n        z -= floorZ;\n\n        var xMinus1 = x - 1, yMinus1 = y - 1, zMinus1 = z - 1;\n\n        var u = n.fade(x), v = n.fade(y), w = n.fade(z);\n\n        var A = n.p[X] + Y, AA = n.p[A] + Z, AB = n.p[A + 1] + Z, B = n.p[X + 1] + Y, BA = n.p[B] + Z, BB = n.p[B + 1] + Z;\n\n        return n.lerp(w, n.lerp(v, n.lerp(u, n.grad(n.p[AA], x, y, z),\n            n.grad(n.p[BA], xMinus1, y, z)),\n            n.lerp(u, n.grad(n.p[AB], x, yMinus1, z),\n                n.grad(n.p[BB], xMinus1, yMinus1, z))),\n            n.lerp(v, n.lerp(u, n.grad(n.p[AA + 1], x, y, zMinus1),\n                n.grad(n.p[BA + 1], xMinus1, y, z - 1)),\n                n.lerp(u, n.grad(n.p[AB + 1], x, yMinus1, zMinus1),\n                    n.grad(n.p[BB + 1], xMinus1, yMinus1, zMinus1))));\n\n    }\n}\n\nmodule.exports = Noise;\n\n\n// WEBPACK FOOTER //\n// ./js/model/ImprovedNoise.js","var Constants = require('./DemoAppConstants');\n/**\n File:\n AbstractServerGame.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n This class is the base Game controller in RealtimeMultiplayerGame on the server side.\n It provides things such as dropping players, and contains a ServerNetChannel\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n\n (function(){\n\t\tMyGameClass = function() {\n\t\t\treturn this;\n \t\t}\n\n\t\tRealtimeMultiplayerGame.extend(MyGameClass, RealtimeMultiplayerGame.AbstractServerGame, null);\n\t};\n Version:\n 1.0\n */\nclass DemoView {\n    constructor() {\n        this.setupCAAT();\n        this.setupStats();\n    };\n\n\n    // Methods\n    setupCAAT() {\n        this.caatScene = new CAAT.Scene(); // Create a scene, all directors must have at least one scene - this is where all your stuff goes\n        this.caatScene.create();\t// Notice we call create when creating this, and ShapeActor below. Both are Actors\n        this.caatScene.setFillStyle('#000000');\n\n        this.caatDirector = new CAAT.Director().initialize(Constants.GAME_WIDTH, Constants.GAME_HEIGHT); // Create the director instance\n        this.caatDirector.addScene(this.caatScene); // Immediately add the scene once it's created\n\n        // Start the render loop, with at 60FPS\n//\t\t\tthis.caatDirector.loop(60);\n    }\n\n    /**\n     * Updates our current view, passing along the current actual time (via Date().getTime());\n     * @param {Number} gameClockReal The current actual time, according to the game\n     */\n    update(gameClockReal) {\n        var delta = gameClockReal - this.caatDirector.timeline;\n        this.caatDirector.render(delta);\n        this.caatDirector.timeline = gameClockReal;\n    }\n\n    /**\n     * Creates a Stats.js instance and adds it to the page\n     */\n    setupStats() {\n        var container = document.createElement('div');\n        this.stats = new Stats();\n        this.stats.domElement.style.position = 'absolute';\n        this.stats.domElement.style.top = '0px';\n        container.appendChild(this.stats.domElement);\n        document.body.appendChild(container);\n    }\n\n    addEntity(anEntityView) {\n        console.log(\"Adding Entity To CAAT\", anEntityView);\n        this.caatScene.addChild(anEntityView);\n    }\n\n    removeEntity(anEntityView) {\n        console.log(\"Removing Entity From CAAT\", anEntityView);\n        this.caatScene.removeChild(anEntityView);\n    }\n\n    /**\n     * Insert the CAATDirector canvas into an HTMLElement\n     * @param {String} id An HTMLElement id\n     */\n    insertIntoHTMLElementWithId(id) {\n        document.getElementById(id).appendChild(this.caatDirector.canvas);\n    }\n\n    // Memory\n    dealloc() {\n        this.director.destroy();\n    }\n}\n\nmodule.exports = DemoView;\n\n\n// WEBPACK FOOTER //\n// ./js/DemoCircles/DemoView.js","var AbstractGame = require('../core/AbstractGame');\nvar ClientNetChannel = require('../network/ClientNetChannel');\nvar Constants = require('../model/Constants');\n\n/**\n File:\n AbstractClientGame.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n This class is the client side base Game controller\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n\n (function(){\n\t\tMyGameClass = function() {\n\t\t\treturn this;\n \t\t}\n\n\t\tRealtimeMultiplayerGame.extend(MyGameClass, RealtimeMultiplayerGame.AbstractGame, null);\n\t};\n */\nclass AbstractClientGame extends AbstractGame {\n\n    constructor() {\n        super();\n        this.setupView();\n        this.setupNetChannel();\n        this.view = null;\t\t\t\t\t\t\t// View\n        this.clientCharacter = null;\t\t\t\t// Reference to this users character\n        this.nickname = '';\t\t\t\t\t\t\t// User 'nickname'\n        this.locateUpdateFailedCount = 0;\n        return this;\n    };\n\n\n    // Methods\n    /**\n     * Setup the view\n     * RealtimeMultiplayerNodeJS is agnostic any rendering method\n     */\n    setupView() {\n        if (this.view === null) {  // If this is called, then user has not overwritten this function\n            throw new Error(\"RealtimeMultiplayerGame.AbstractClientGame.setupView - Override this method, then call MyClientGame.superclass.setupView()\");\n        }\n        this.fieldController.setView(this.view);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setupNetChannel() {\n        super.setupNetChannel(); //is a no-op.  WTF is with all these super no-ops?\n        this.netChannel = new ClientNetChannel(this);\n    }\n\n    /**\n     * @inheritDoc\n     */\n    setupCmdMap() {\n        super.setupCmdMap();\n    }\n\n    /**\n     * @inheritDoc\n     */\n    tick() {\n        super.tick();\n\n        // Allow all entities to update their position\n        this.fieldController.getEntities().forEach(function (key, entity) {\n            entity.updateView();\n        }, this);\n\n        // Continuously queue information about our input - which will be sent to the server by netchannel\n        if (this.clientCharacter != null) {\n            var input = this.clientCharacter.constructEntityDescription();\n            this.netChannel.addMessageToQueue(false, Constants.CMDS.PLAYER_UPDATE, input);\n        }\n\n        // Draw the gameworld\n        this.renderAtTime(this.gameClock - Constants.CLIENT_SETTING.INTERP - Constants.CLIENT_SETTING.FAKE_LAG);\n        this.netChannel.tick();\n    }\n\n    /**\n     * Renders back in time between two previously received messages allowing for packet-loss, and a smooth simulation\n     * @param renderTime\n     */\n    renderAtTime(renderTime) {\n        var cmdBuffer = this.netChannel.getIncomingWorldUpdateBuffer(),\n            len = cmdBuffer.length;\n\n        // Need atleast 2 updates to render between\n        if (len < 2) return;\n        var newPosition = new RealtimeMultiplayerGame.model.Point(0, 0),\n            newRotation = 0.0;\n\n        // if the distance between prev and next is too great - don't interpolate\n        var maxInterpolationDistance = 150,\n            maxInterpSQ = maxInterpolationDistance * maxInterpolationDistance;\n\n        // Store the next world-entity-description before and after the desired render time\n        var nextWED = null,\n            previousWED = null;\n\n        // Loop through the points, until we find the first one that has a timeValue which is greater than our renderTime\n        // Knowing that then we know that the combined with the one before it - that passed our just check - we know we want to render ourselves somehwere between these two points\n        var i = 0;\n        var forceUpdate = false;\n        while (++i < len) {\n            var currentWED = cmdBuffer[i];\n\n            // We fall between this \"currentWorldEntityDescription\", and the last one we just checked\n            if (currentWED.gameClock >= renderTime) {\n                previousWED = cmdBuffer[i - 1];\n                nextWED = currentWED;\n                this.locateUpdateFailedCount = 0;\n                break;\n            }\n\n            // Have no found a matching update for a while - the client is way behind the server, set our time to the time of the last udpate we received\n//\t\t\t\tif(i === len -1) {\n//\t\t\t\t\tif(++this.locateUpdateFailedCount === Constants.CLIENT_SETTING.MAX_UPDATE_FAILURE_COUNT) {\n//\t\t\t\t\t\tthis.gameClock = currentWED.gameClock;\n//\t\t\t\t\t\tthis.gameTick = currentWED.gameTick;\n//\t\t\t\t\t\tpreviousWED = cmdBuffer[i-1];\n//\t\t\t\t\t\tnextWED = currentWED;\n//\t\t\t\t\t}\n//\t\t\t\t}\n        }\n\n        // Could not find two points to render between\n        if (nextWED == null || previousWED == null) {\n            console.log(\"GIVE UP\")\n            return false;\n        }\n\n        /**\n         * More info: http://www.learningiphone.com/2010/09/consicely-animate-an-object-along-a-path-sensitive-to-time/\n         * Find T in the time value between the points:\n         *\n         * durationBetweenPoints: Amount of time between the timestamp in both points\n         * offset: Figure out what our time would be if we pretended the previousBeforeTime.time was 0.00 by subtracting it from us\n         * t: Now that we have a zero based offsetTime, and a maximum time that is also zero based (durationBetweenPoints)\n         * we can easily figure out what offsetTime / duration.\n         *\n         * Example values: timeValue = 5.0f, nextPointTime = 10.0f, lastPointTime = 4.0f\n         * result:\n         * duration = 6.0f\n         * offsetTime = 1.0f\n         * t = 0.16\n         */\n        var durationBetweenPoints = (nextWED.gameClock - previousWED.gameClock);\n        var offsetTime = renderTime - previousWED.gameClock;\n        var activeEntities = {};\n\n        // T is where we fall between, as a function of these two points\n        var t = offsetTime / (nextWED.gameClock - previousWED.gameClock);\n        if (t > 1.0) t = 1.0;\n        else if (t < 0) t = 0.0;\n\n        // Note: We want to render at time \"B\", so grab the position at time \"A\" (previous), and time \"C\"(next)\n        var entityPositionPast = new RealtimeMultiplayerGame.model.Point(0, 0),\n            entityRotationPast = 0;\n\n        var entityPositionFuture = new RealtimeMultiplayerGame.model.Point(0, 0),\n            entityRotationFuture = 0;\n\n        // Update players\n        nextWED.forEach(function (key, entityDesc) {\n            // Catch garbage values\n            var entityid = entityDesc.entityid;\n            var entity = this.fieldController.getEntityWithid(entityid);\n\n            // We don't have this entity - create it!\n            if (!entity) {\n                this.createEntityFromDesc(entityDesc);\n            }\n            else {\n                // We already have this entity - update it\n                var previousEntityDescription = previousWED.objectForKey(entityid);\n\n                // Could not find info for this entity in previous description\n                // This can happen if this is this entities first frame in the game\n                if (!previousEntityDescription) return;\n\n                // Store past and future positions to compare\n                entityPositionPast.set(previousEntityDescription.x, previousEntityDescription.y);\n                entityRotationPast = previousEntityDescription.rotation;\n\n                entityPositionFuture.set(entityDesc.x, entityDesc.y);\n                entityRotationFuture = entityDesc.rotation;\n\n                // if the distance between prev and next is too great - don't interpolate\n                if (entityPositionPast.getDistanceSquared(entityPositionFuture) > maxInterpSQ) {\n                    t = 1;\n                }\n\n                // Interpolate the objects position by multiplying the Delta times T, and adding the previous position\n                newPosition.x = ( (entityPositionFuture.x - entityPositionPast.x) * t ) + entityPositionPast.x;\n                newPosition.y = ( (entityPositionFuture.y - entityPositionPast.y) * t ) + entityPositionPast.y;\n                newRotation = ( (entityRotationFuture - entityRotationPast) * t ) + entityRotationPast;\n            }\n\n            // Update the entity with the new information, and insert it into the activeEntities array\n            this.fieldController.updateEntity(entityid, newPosition, newRotation, entityDesc);\n            activeEntities[entityid] = true;\n\n        }, this);\n\n\n        // Destroy removed entities, every N frames\n        if (this.gameTick % Constants.CLIENT_SETTING.EXPIRED_ENTITY_CHECK_RATE === 0)\n            this.fieldController.removeExpiredEntities(activeEntities);\n    }\n\n\n    /**\n     * Create an enitity using the information provided\n     * @param {Object} entityDesc An object containing information such as 'entityid', 'clientid' and usually position information atleast\n     */\n    createEntityFromDesc(entityDesc) {\n        // OVERRIDE\n    }\n\n    /**\n     * Called by the ClientNetChannel, it sends us an array containing tightly packed values and expects us to return a meaningful object\n     * It is left up to each game to implement this function because only the game knows what it needs to send.\n     * However the 4 example projects in RealtimeMultiplayerNodeJS offer should be used ans examples\n     *\n     * @param {Array} entityDescAsArray An array of tightly packed values\n     * @return {Object} An object which will be returned to you later on tied to a specific entity\n     */\n//\t\tparseEntityDescriptionArray: function(entityDescAsArray)\n//\t\t{\n//\t\t\t// This is left in as an example, copy paste this into your AbstractClientGame subclass and modify from there\n//\t\t\tvar entityDescription = {};\n//\n//\t\t\t// It is left upto each game to implement this function because only the game knows what it needs to send.\n//\t\t\t// However the 4 example projects in RealtimeMultiplayerNodeJS offer this an example\n////\t\t\tentityDescription.entityid = +entityDescAsArray[0];\n////\t\t\tentityDescription.clientid = +entityDescAsArray[1];\n////\t\t\tentityDescription.entityType = +entityDescAsArray[2];\n////\t\t\tentityDescription.x = +entityDescAsArray[3];\n////\t\t\tentityDescription.y = +entityDescAsArray[4];\n////\t\t\tentityDescription.radius = +entityDescAsArray[5];\n////\t\t\tentityDescription.rotation = +entityDescAsArray[6];\n//\n//\t\t\treturn entityDescription;\n//\t\t},\n\n//////\tClientNetChannelDelegate\n    /**\n     * ClientNetChannel has connected via socket.io to server for first time\n     * Join the game\n     * @param messageData\n     */\n    netChannelDidConnect(messageData) {\n        // Sync time with server\n        this.gameClock = messageData.payload.gameClock;\n    }\n\n\n    /**\n     * Called when the user has entered a name, and wants to join the match\n     * @param aNickname\n     */\n    joinGame(aNickname) {\n        this.nickname = aNickname;\n        // Create a 'join' message and queue it in ClientNetChannel\n        this.netChannel.addMessageToQueue(true, Constants.CMDS.PLAYER_JOINED, {nickname: this.nickname});\n    }\n\n\n    /**\n     * Start/Restart the game tick\n     */\n    startGameClock() {\n        var that = this;\n        (function animationLoop() {\n            that.tick();\n\n            if (that.isRunning)\n                requestAnimationFrame(animationLoop);\n        })()\n    }\n\n    /**\n     * Called by NetChannel when it receives a command if it decides not to intercept it.\n     * (For example CMDS.FULL_UPDATE is always intercepted, so it never calls this function, but CMDS.SERVER_MATCH_START is not intercepted so this function triggered)\n     * @param messageData\n     */\n    netChannelDidReceiveMessage(messageData) {\n        // OVERRIDE\n    }\n\n    netChannelDidDisconnect() {\n        this.isRunning = false;\n        this.stopGameClock();\n    }\n\n\n    ///// Memory\n    dealloc() {\n        if (this.view) this.view.dealloc();\n        this.view = null;\n\n        super.dealloc();\n    }\n}\n\nmodule.exports = AbstractClientGame;\n\n\n// WEBPACK FOOTER //\n// ./js/core/AbstractClientGame.js","var FieldController = require('../controller/FieldController');\n/**\n File:\n AbstractGame.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n This class is the base Game controller in RealtimeMultiplayerGame it provides things such as, keeping track of the current game clock, starting and stopping the game clock\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n\n (function(){\n\t\tMyGameClass = function() {\n\t\t\treturn this;\n \t\t}\n\n\t\tRealtimeMultiplayerGame.extend(MyGameClass, RealtimeMultiplayerGame.AbstractGame, null);\n\t};\n */\n\nclass AbstractGame {\n\n    constructor() {\n        this.setupNetChannel();\n        this.setupCmdMap();\n\n        // Properties\n        this.gameClockReal = 0;\t\t\t\t\t\t// Actual time via \"new Date().getTime();\"\n        this.gameClock = 0;\t\t\t\t\t\t\t// Seconds since start\n        this.gameTick = 0;\t\t\t\t\t\t\t// Ticks since start\n        this.isRunning = true;\n        this.speedFactor = 1;   \t\t\t\t\t// Used to create Framerate Independent Motion (FRIM) - 1.0 means running at exactly the correct speed, 0.5 means half-framerate. (otherwise faster machines which can update themselves more accurately will have an advantage)\n        this.intervalGameTick = null;\t\t\t\t// Setinterval for gametick\n        this.intervalFramerate = 60;\t\t\t\t// Try to call our tick function this often, intervalFramerate, is used to determin how often to call settimeout - we can set to lower numbers for slower computers\n        this.intervalTargetDelta = NaN;\t            // this.targetDelta, milliseconds between frames. Normally it is 16ms or 60FPS. The framerate the game is designed against - used to create framerate independent motion\n        this.gameDuration = Number.MAX_VALUE;\t\t// Gameduration\n\n        this.netChannel = null;\t\t\t\t\t\t// ServerNetChannel / ClientNetChannel determined by subclass\n        this.fieldController = new FieldController();\n\n        return this;\n    };\n\n\n\n    /**\n     * Setup the ClientNetChannel or ServerNetChannel\n     */\n    setupNetChannel() {\n    }\n\n    /**\n     * setup the command mapping for the events recevied from netchannel\n     */\n    setupCmdMap() {\n        this.cmdMap = {};\n    }\n\n    // Methods\n    tick() {\n        // Store previous time and update current\n        var oldTime = this.gameClockReal;\n        this.gameClockReal = new Date().getTime();\n\n        // Our clock is zero based, so if for example it says 10,000 - that means the game started 10 seconds ago\n        var delta = this.gameClockReal - oldTime;\n        this.gameClock += delta;\n        this.gameTick++;\n\n        // Framerate Independent Motion -\n        // 1.0 means running at exactly the correct speed, 0.5 means half-framerate. (otherwise faster machines which can update themselves more accurately will have an advantage)\n        this.speedFactor = delta / ( this.intervalTargetDelta );\n        if (this.speedFactor <= 0) this.speedFactor = 1;\n\n        this.fieldController.tick(this.speedFactor, this.gameClockReal, this.gameTick);\n    }\n\n\n    /**\n     * Start/Restart the game tick\n     */\n    startGameClock() {\n        var that = this;\n        this.gameClockReal = new Date().getTime();\n        this.intervalTargetDelta = Math.floor(1000 / this.intervalFramerate);\n        this.intervalGameTick = setInterval(function () {\n            that.tick()\n        }, this.intervalTargetDelta);\n    }\n\n    /**\n     * Stop the game tick\n     */\n    stopGameClock() {\n        clearInterval(this.intervalGameTick);\n        clearTimeout(this.intervalGameTick);\n    }\n\n    setGameDuration() {\n    }\n\n    // Memory\n    dealloc() {\n        if (this.netChannel) this.netChannel.dealloc();\n        this.netChannel = null;\n\n        clearInterval(this.intervalGameTick);\n    }\n\n    log() {\n        // OVERRIDE or USE CONSOLE.LOG\n    }\n\n    ///// Accessors\n    getGameClock() {\n        return this.gameClock;\n    }\n\n    getGameTick() {\n        return this.gameTick;\n    }\n}\n\nmodule.exports = AbstractGame;\n\n\n// WEBPACK FOOTER //\n// ./js/core/AbstractGame.js","var SortedLookupTable = require('../lib/SortedLookupTable');\n\nclass FieldController {\n    \n    constructor() {\n        this.entities = new SortedLookupTable();\n        this.players = new SortedLookupTable();\n    };\n\n    /**\n     * Update all entities\n     * @param {Number} speedFactor    A number signifying how much faster or slower we are moving than the target framerate\n     * @param {Number} gameClock    Current game time in seconds (zero based)\n     * @param {Number} gameTick        Current game tick (incrimented each frame)\n     */\n    tick (speedFactor, gameClock, gameTick) {\n        // DO SOME STUFF\n    }\n\n    /**\n     * Internal function. Adds an entity to our collection, and adds it to the view if we have one\n     * @param anEntity    An entity to add, should already be created and contain a unique entityid\n     */\n    addEntity (anEntity) {\n        this.entities.setObjectForKey(anEntity, anEntity.entityid);\n\n        // If we have a view, then add the player to it\n        if (this.view) {\n            this.view.addEntity(anEntity.getView());\n        }\n\n    }\n\n    /**\n     * Updates the entity based on new information (called by AbstractClientGame::renderAtTime)\n     * @param {int}        entityid    entityid we want to update\n     * @param {RealtimeMultiplayerGame.model.Point}    newPosition    position\n     * @param {Number}    newRotation    rotation\n     * @param {Object}    newEntityDescription The full contents of the the snapshots newEntityDescription\n     */\n    updateEntity (entityid, newPosition, newRotation, newEntityDescription) {\n        var entity = this.entities.objectForKey(entityid);\n\n        if (entity != null) {\n            entity.position.x = newPosition.x;\n            entity.position.y = newPosition.y;\n            entity.rotation = newRotation;\n            entity.lastReceivedEntityDescription = newEntityDescription;\n        } else {\n            console.log(\"(FieldController)::updateEntity - Error: Cannot find entity with entityid\", entityid);\n        }\n    }\n\n///// Memory\n\n    addPlayer (aPlayerEntity) {\n        this.addEntity(aPlayerEntity);\n        this.players.setObjectForKey(aPlayerEntity, aPlayerEntity.clientid);\n    }\n\n    /**\n     * Remove a player.\n     * Does player stuff, then calls removeEntity.\n     * @param clientid    ConnectionID of the player who jumped out of the game\n     */\n    removePlayer (clientid) {\n        var player = this.players.objectForKey(clientid);\n        if (!player) {\n            console.log(\"(FieldController), No 'Character' with clientid \" + clientid + \" ignoring...\");\n            return;\n        }\n\n        this.removeEntity(player.entityid);\n        this.players.remove(player.clientid);\n    }\n\n\n    /**\n     * Removes an entity by it's ID\n     * @param entityid\n     */\n    removeEntity (entityid) {\n        var entity = this.entities.objectForKey(entityid);\n\n        if (this.view)\n            this.view.removeEntity(entity.view);\n\n        entity.dealloc();\n        this.entities.remove(entityid);\n    }\n\n    /**\n     * Checks an array of \"active entities\", against the existing ones.\n     * It's used to remove entities that expired in between two updates\n     * @param activeEntities\n     */\n    removeExpiredEntities (activeEntities) {\n        var entityKeysArray = this.entities._keys;\n        var i = entityKeysArray.length;\n        var key;\n        var totalRemoved = 0;\n\n        while (i--) {\n            key = entityKeysArray[i];\n\n            // This entity is still active. Move along.\n            if (activeEntities[key])\n                continue;\n\n            // This entity is not active, check if it belongs to the server\n            var entity = this.entities.objectForKey(key);\n            var isPlayer = this.players.objectForKey(entity.clientid) != null;\n\n\n            // Remove special way if player (which calls removeEntity on itself as well), or just remove it as an entity\n            if (isPlayer) {\n                this.removePlayer(entity.clientid);\n            } else {\n                this.removeEntity(entity.entityid);\n            }\n\n            totalRemoved++;\n        }\n\n    }\n\n    dealloc () {\n        this.players.forEach(function (key, entity) {\n            this.removePlayer(entity.clientid);\n        }, this);\n        this.players.dealloc();\n        this.players = null;\n\n        this.entities.forEach(function (key, entity) {\n            this.removeEntity(entity.entityid);\n        }, this);\n        this.entities.dealloc();\n        this.entities = null;\n\n\n        this.view = null;\n    }\n\n///// Accessors\n    // Will be called on client side\n    setView (aView) {\n        this.view = aView;\n    }\n    getView () {\n        return this.view\n    }\n    getEntities () {\n        return this.entities\n    }\n    getPlayers () {\n        return this.players;\n    }\n    getEntityWithid (anEntityid) {\n        return this.entities.objectForKey(anEntityid);\n    }\n    getPlayerWithid (aClientid) {\n        return this.players.objectForKey(aClientid);\n    }\n};\n\n\nmodule.exports = FieldController;\n\n\n// WEBPACK FOOTER //\n// ./js/controller/FieldController.js","/**\nFile:\n\tSortedLookupTable.js\nCreated By:\n\t(Class from http://blog.jcoglan.com/2010/10/18/i-am-a-fast-loop/)\n\tCopy->Pasted->Modified by Mario Gonzalez\n\t\nProject\t:\n\tOgilvy Holiday Card 2010\nAbstract:\n\n\tA sorted LookupTable is a data structure that provides us a way to iterate thru objects at a speed\n\tcomparable to reverse while, but also have named keys as we would if we used an object (which provides very slow iteration)\n\tIt also gives us O(log n) removal of objects.\nBasic Usage:\n\n\thttp://blog.jcoglan.com/2010/10/18/i-am-a-fast-loop/\n*/\n// @getify's solution\n//var Set = (function()\n//{\n//\tvar indexOf = Array.prototype.indexOf;\n//\n//\tif (typeof indexOf !== 'function')\n//\t{\n//\t\tindexOf(value)\n//\t\t{\n//\t\t\tfor (var index = 0, length = this.length; index < length; index++)\n//\t\t\t{\n//\t\t\t\tif (this[index] === value)\n//\t\t\t\t{\n//\t\t\t\t\treturn index;\n//\t\t\t\t}\n//\t\t\t}\n//\t\t\treturn -1;\n//\t\t}\n//\t}\n//\n//\tfunction Set()\n//\t{\n//\t\tthis.set = [];\n//\t}\n//\n//\tSet.prototype = {\n//\t\t'constructor': Set,\n//\t\t'put': function(value, key)\n//\t\t{\n//\t\t\tvar index = indexOf.call(this.set, key);\n//\t\t\tif (index !== -1 && index % 2 === 0)\n//\t\t\t{\n//\t\t\t\tthis.set.splice(index, 2);\n//\t\t\t}\n//\t\t\tthis.set.push(key, value);\n//\t\t},\n//\t\t'get': function(key)\n//\t\t{\n//\t\t\tvar index = indexOf.call(this.set, key);\n//\t\t\treturn (index !== -1 && index % 2 === 0) ? this.set[++index] : null;\n//\t\t},\n//\t\t'containsKey': function(key)\n//\t\t{\n//\t\t\tvar index = indexOf.call(this.set, key);\n//\t\t\treturn (index !== -1 && index % 2 === 0);\n//\t\t},\n//\t\t'containsValue': function(value)\n//\t\t{\n//\t\t\tvar index = indexOf.call(this.set, value);\n//\t\t\treturn (index !== -1 && index % 2 !== 0);\n//\t\t},\n//\t\t'remove': function(key)\n//\t\t{\n//\t\t\tvar index = indexOf.call(this.set, key),\n//\t\t\t\t\tvalue = null;\n//\t\t\tif (index !== -1 && index % 2 === 0)\n//\t\t\t{\n//\t\t\t\tvalue = this.set.splice(index, 2)[1];\n//\t\t\t}\n//\t\t\treturn value;\n//\t\t},\n//\n//\t\t'forEach': function(block, context)\n//\t\t{\n//\t\t\tvar set = this.set,\n//\t\t\t\ti = this.set.length-1,\n//\t\t\t\tkey;\n//\n//\t\t\twhile (i > 0)\n//\t\t\t{\n//\t\t\t\tblock.call(context, set[i - 1], set[key]);\n//\t\t\t\ti-=2;\n//\t\t\t}\n//\t\t}\n//\t}\n//\n//\treturn Set;\n//}());\n\nclass LookupTable {\n\tconstructor()\n\t{\n\t\tthis._keys = [];\n\t\tthis._data = {}\n\t\tthis.nextUUID = 0;\n\t}\n\n\n\tsetObjectForKey(value, key)\n\t{\n\t\tif (!this._data.hasOwnProperty(key)) this._keys.push(key);\n\t\tthis._data[key] = value;\n\n\t\treturn value;\n\t}\n\n\tobjectForKey(key)\n\t{\n\t\treturn this._data[key];\n\t}\n\n\tforEach(block, context)\n\t{\n\t\tvar keys = this._keys,\n\t\t\tdata = this._data,\n\t\t\ti = keys.length,\n\t\t\tkey;\n\n\t\twhile (i--)\n\t\t{\n\t\t\tkey = keys[i];\n\t\t\tblock.call(context, key, data[key]);\n\t\t}\n\t}\n\n\tcount()\n\t{\n\t\treturn this._keys.length;\n\t}\n\n\tdealloc()\n\t{\n\t\tdelete this._keys;\n\t\tdelete this._data;\n\t}\n}\n\nclass SortedLookupTable extends LookupTable {\n\t/**\n\t*\tSorted LookupTable,\n\t*/\n\tconstructor()\n\t{\n\t\tsuper();\n\t}\n\n\tsetObjectForKey(value, key)\n\t{\n\t\tif( !this._data.hasOwnProperty( key ) )\n\t\t{\n\t\t\tvar index = this._indexOf(key);\n\t\t\tthis._keys.splice(index, 0, key);\n\t\t}\n\t\tthis._data[key] = value;\n\n\t\treturn value;\n\t}\n\n\tremove(key)\n\t{\n\t\tif (!this._data.hasOwnProperty(key)) return;\n\t\tdelete this._data[key];\n\t\tvar index = this._indexOf(key);\n\t\tthis._keys.splice(index, 1);\n\t}\n\n\tindexOf(key)\n\t{\n\t\tvar keys = this._keys,\n\t\t\tn = keys.length,\n\t\t\ti = 0,\n\t\t\td = n;\n\n\t\tif (n === 0) return 0;\n\t\tif (key < keys[0]) return 0;\n\t\tif (key > keys[n - 1]) return n;\n\n\t\twhile (key !== keys[i] && d > 0.5) {\n\t\t\td = d / 2;\n\t\t\ti += (key > keys[i] ? 1: -1) * Math.round(d);\n\t\t\tif (key > keys[i - 1] && key < keys[i]) d = 0;\n\t\t}\n\t\treturn i;\n\t}\n}\n\nmodule.exports = SortedLookupTable;\n\n\n// WEBPACK FOOTER //\n// ./js/lib/SortedLookupTable.js","var Constants = require('../model/Constants');\nvar NetChannelMessage = require('../model/NetChannelMessage');\nvar SortedLookupTable = require('../lib/SortedLookupTable');\n/**\n File:\n ClientNetChannel.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n Communicates with the server and stores rolling world-entity-descriptions\n\n -> GameController talks to this object\n <--> ClientNetChannel waits to be ready, when it is\n <-- ClientNetChannel talks to the ServerNetChannel\n <--> ServerNetChannel does some stuff\n --> ServerNetChannel talks to ClientNetChannel\n --> ClientNetChannel talks to the GameController  --^\n\n Basic Usage:\n Create an object that conforms to the following protocol\n netChannelDidConnect();\n netChannelDidReceiveMessage();\n netChannelDidDisconnect();\n */\nclass ClientNetChannel {\n\n    constructor(aDelegate) {\n        this.delegate = null;\t\t\t        // Object informed when ClientNetChannel does interesting stuff\n        this.socketio = null;\t\t\t\t    // Reference to singluar Socket.IO instance\n        this.clientid = null;\t\t\t\t    // A client id is set by the server on first connect\n\n        // Settings\n        this.cl_updateRate = Constants.CLIENT_SETTING.CMD_RATE,\t\t// How often we can receive messages per sec\n\n        // connection info\n        this.latency = 1000;\t\t\t\t    // Current latency time from server\n        this.lastSentTime = -1;\t\t\t\t    // Time of last sent message\n        this.lastRecievedTime = -1;\t\t\t\t// Time of last recieved message\n\n        // Data\n        this.messageBuffer = [];\t\t\t\t// Store last N messages to be sent\n        this.outgoingSequenceNumber = 0;\n        this.incomingWorldUpdateBuffer = [];\t// Store last N received WorldDescriptions\n        this.reliableBuffer = null;\t\t\t\t// We sent a 'reliable' message and are waiting for acknowledgement that it was sent\n\n        this.setDelegate(aDelegate);\n        this.setupSocketIO();\n        this.setupCmdMap();\n        return this;\n    };\n\n    \n\n\n    setupSocketIO() {\n        this.socketio = io(Constants.SERVER_SETTING.GET_URI());\n\n        var that = this;\n        this.socketio.on('connect', function () {\n            that.onSocketConnect()\n        });\n        this.socketio.on('message', function (obj) {\n            that.onSocketDidAcceptConnection(obj)\n        });\n        this.socketio.on('disconnect', function () {\n            that.onSocketDisconnect()\n        });\n    }\n\n\n    /**\n     * Map RealtimeMultiplayerGame.Constants.CMDS to functions\n     */\n    setupCmdMap() {\n        this.cmdMap = {};\n        this.cmdMap[Constants.CMDS.SERVER_FULL_UPDATE] = this.onServerWorldUpdate;\n    }\n\n    ///// SocketIO Callbacks\n    onSocketConnect() {\n        console.log(\"(ClientNetChannel):onSocketConnect\", arguments, this.socketio);\n    }\n\n    /**\n     * Called when ServerNetChannel has accepted your connection and given you a client id\n     * This is only called once, use the info to set some properties\n     */\n    onSocketDidAcceptConnection(aNetChannelMessage) {\n\n        console.log(\"(ClientNetChannel)::onSocketDidAcceptConnection\", aNetChannelMessage);\n\n        // Should not have received this msg\n        if (aNetChannelMessage.cmd != Constants.CMDS.SERVER_CONNECT) {\n            throw \"(ClientNetChannel):onSocketDidAcceptConnection recieved but cmd != SERVER_CONNECT \";\n        }\n\n        this.clientid = aNetChannelMessage.id;\n        this.delegate.log(\"(ClientNetChannel)::ClientID - \")\n        this.delegate.netChannelDidConnect(aNetChannelMessage);\n\n        // Set onMessage function back to normal - removing event listener didn't work, so for now changing the mapping\n        // TODO: Do via removeEvent\n        //this.socketio.removeEvent(\"message\", function( obj ){ that.onSocketDidAcceptConnection( obj ) });\n        //this.socketio.on('message', function( obj ){ that.onSocketMessage( obj ) });\n        this.onSocketDidAcceptConnection = this.onSocketMessage;\n    }\n\n    /**\n     * Called when Socket.io has received a new message\n     * @param aNetChannelMessage\n     */\n    onSocketMessage(aNetChannelMessage) {\n        this.lastReceivedTime = this.delegate.getGameClock();\n        this.adjustRate(aNetChannelMessage);\n\n        if (aNetChannelMessage.id == this.clientid) // We sent this, clear our reliable buffer que\n        {\n            if (aNetChannelMessage.cmd == Constants.CMDS.SERVER_FULL_UPDATE) {\n//\t\t\t\t\tdebugger; //  IF CALLED THIS IS A BUG\n            }\n\n            var messageIndex = aNetChannelMessage.seq & Constants.CLIENT_SETTING.MAX_BUFFER;\n            var message = this.messageBuffer[messageIndex];\n\n            // Free up reliable buffer to allow for new message to be sent\n            if (this.reliableBuffer === message) {\n                this.reliableBuffer = null;\n            }\n\n            // Remove from memory\n            this.messageBuffer[messageIndex] = null;\n            message = null;\n\n            return;\n        }\n\n        // Call the mapped function\n        if (this.cmdMap[aNetChannelMessage.cmd])\n            this.cmdMap[aNetChannelMessage.cmd].call(this, aNetChannelMessage);\n        else\n            console.log(\"(NetChannel)::onSocketMessage could not map '\" + aNetChannelMessage.cmd + \"' to function!\");\n    }\n\n    onSocketDisconnect() {\n        this.delegate.netChannelDidDisconnect();\n        this.connection = null;\n        this.socketio = null;\n        console.log(\"(ClientNetChannel)::onSocketDisconnect\", arguments);\n    }\n\n\n    /**\n     * Send queued messages\n     */\n    tick() {\n        // Can't send new message, still waiting for last imporant message to be returned\n        if (this.reliableBuffer !== null) return;\n\n        var hasReliableMessages = false;\n        var firstUnreliableMessageFound = null;\n\n        var len = this.messageBuffer.length;\n        for (var i = 0; i < len; i++) {\n            var message = this.messageBuffer[i];\n            if (!message) continue;\t// Slot is empty\n\n            // We have more important things to tend to sir.\n            if (message.isReliable) {\n                hasReliableMessages = true;\n                this.sendMessage(message);\n                return;\n            }\n        }\n\n        // No reliable messages waiting, enough time has passed to send an update\n        if (!hasReliableMessages && this.canSendMessage() && this.nextUnreliable != null) {\n            this.sendMessage(this.nextUnreliable);\n            this.nextUnreliable = null;\n        }\n    }\n\n    /**\n     *\n     * @param aNetChannelMessage\n     */\n    onServerWorldUpdate(aNetChannelMessage) {\n        var len = aNetChannelMessage.data.length;\n        var i = -1;\n\n        // Store all world updates contained in the message.\n        while (++i < len) // Want to parse through them in correct order, so no fancy --len\n        {\n            var singleWorldUpdate = aNetChannelMessage.data[i];\n            var worldEntityDescription = this.createWorldEntityDescriptionFromString(singleWorldUpdate);\n\n            // Add it to the incommingCmdBuffer and drop oldest element\n            this.incomingWorldUpdateBuffer.push(worldEntityDescription);\n            if (this.incomingWorldUpdateBuffer.length > Constants.CLIENT_SETTING.MAX_BUFFER)\n                this.incomingWorldUpdateBuffer.shift();\n        }\n    }\n\n    /**\n     * Takes a WorldUpdateMessage that contains the information about all the elements inside of a string\n     * and creates SortedLookupTable out of it with the entityid's as the keys\n     * @param {String} aWorldUpdateMessage\n     */\n    createWorldEntityDescriptionFromString(aWorldUpdateMessage) {\n        // Create a new WorldEntityDescription and store the clock and gametick in it\n        var worldDescription = new SortedLookupTable();\n        worldDescription.gameTick = aWorldUpdateMessage.gameTick;\n        worldDescription.gameClock = aWorldUpdateMessage.gameClock;\n\n\n        var allEntities = aWorldUpdateMessage.entities.split('|'),\n            allEntitiesLen = allEntities.length; //\n\n        // Loop through each entity\n        while (--allEntitiesLen)   // allEntities[0] is garbage, so by using prefix we avoid it\n        {\n            // Loop through the string representing the entities properties\n            var entityDescAsArray = allEntities[allEntitiesLen].split(',');\n            var entityDescription = this.delegate.parseEntityDescriptionArray(entityDescAsArray);\n\n            // Store the final result using the entityid\n            worldDescription.setObjectForKey(entityDescription, entityDescription.entityid);\n        }\n\n\n        return worldDescription;\n    }\n\n    /**\n     * Sends a message via socket.io\n     * @param aMessageInstance\n     */\n    sendMessage(aMessageInstance) {\n        if (this.socketio == undefined) {\n            console.log(\"(ClientNetChannel)::sendMessage - socketio is undefined!\");\n            return;\n        }\n\n        if (!this.socketio.connected) { // Socket.IO is not connectd, probably not ready yet\n            // console.log(\"(ClientNetChannel)::sendMessage - socketio is undefined!\");\n            return;      //some error here\n        }\n\n        aMessageInstance.messageTime = this.delegate.getGameClock(); // Store to determine latency\n\n        this.lastSentTime = this.delegate.getGameClock();\n\n        if (aMessageInstance.isReliable) {\n            this.reliableBuffer = aMessageInstance; // Block new connections\n        }\n\n        this.socketio.json.send(aMessageInstance);\n\n        if (Constants.CLIENT_NETCHANNEL_DEBUG) console.log('(NetChannel) Sending Message, isReliable', aMessageInstance.isReliable, aMessageInstance);\n    }\n\n    /**\n     * Prepare a message for sending at next available time\n     * @param isReliable\n     * @param anUnencodedMessage\n     */\n    addMessageToQueue(isReliable, aCommandConstant, payload) {\n        // Create a NetChannelMessage\n        var message = new NetChannelMessage(this.outgoingSequenceNumber, this.clientid, isReliable, aCommandConstant, payload);\n\n        // Add to array the queue using bitmask to wrap values\n        this.messageBuffer[this.outgoingSequenceNumber & Constants.CLIENT_SETTING.MAX_BUFFER] = message;\n\n        if (!isReliable) {\n            this.nextUnreliable = message;\n        }\n\n        ++this.outgoingSequenceNumber;\n        if (Constants.DEBUG_SETTING.CLIENT_NETCHANNEL_DEBUG) console.log('(NetChannel) Adding Message to queue', this.messageBuffer[this.outgoingSequenceNumber & Constants.CLIENT_SETTING.MAX_BUFFER], \" ReliableBuffer currently contains: \", this.reliableBuffer);\n    }\n\n    /**\n     * Adjust the message chokerate based on latency\n     * @param serverMessage\n     */\n    adjustRate(serverMessage) {\n        var deltaTime = serverMessage.gameClock - this.delegate.getGameClock();\n        this.latency = deltaTime;\n\n        // TODO: Adjust cl_updateRate based on message thruput\n        //\t\ttime -= 100; // Subtract 100ms\n        //\t\tif(this.)\n        //\t\tconsole.log('Time:', time)\n        // time -= 0.1; // subtract 100ms\n        //\n        // if(time <= 0)\n        // {\n        // \tthis.rate = 0.12; /* 60/1000*2 */\n        // }\n        // else\n        // {\n        // }\n    }\n\n    ///// Memory\n    /**\n     * Clear memory\n     */\n    dealloc() {\n        this.connection.close();\n        this.connection = null;\n        this.messageBuffer = null;\n        this.incomingWorldUpdateBuffer = null;\n    }\n\n    ///// Accessors\n    /**\n     * Set the NetChannelDelegate after validation\n     * @param aDelegate\n     */\n    setDelegate(aDelegate) {\n        //Don't run checks, just make sure your delegate conforms\n        this.delegate = aDelegate;\n    }\n\n    /**\n     * Determines if it's ok for the client to send a unreliable new message yet\n     */\n    canSendMessage() {\n        var isReady = (this.delegate.getGameClock() > this.lastSentTime + this.cl_updateRate);\n        return isReady;\n    }\n    getClientid() {\n        return this.clientid\n    }\n    getIncomingWorldUpdateBuffer() {\n        return this.incomingWorldUpdateBuffer\n    }\n    getLatency() {\n        return this.latency\n    }\n};\n\nmodule.exports = ClientNetChannel;\n\n\n// WEBPACK FOOTER //\n// ./js/network/ClientNetChannel.js","/**\n File:\n Constants.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n This class contains Constants used by RealtimeMuliplayerGame\n Basic Usage:\n [This class is not instantiated! - below is an example of using this class by extending it]\n var clientDropWait = RealtimeMultiplayerGame.Constants.CL_DEFAULT_MAXRATE\n */\nmodule.exports = {\n    DEBUG_SETTING: {\n        SERVER_NETCHANNEL_DEBUG: true,\n        CLIENT_NETCHANNEL_DEBUG: true\n    },\n\n    SERVER_SETTING: {\n        CLIENT_ID: 0,\n        SOCKET_PROTOCOL: \"http\",\n        SOCKET_DOMAIN: \"localhost\",\n        SOCKET_PORT: 8081,\n\n        /** @return {string} */\n        GET_URI: function () {\n            return  this.SOCKET_PROTOCOL\n                + \"://\" + this.SOCKET_DOMAIN\n                + \":\" + this.SOCKET_PORT;\n        }\n    },\n\n    CLIENT_SETTING: {\n        INTERP: 75,\t\t\t\t\t\t// How far back to interpolate the client-rendered world\n        FAKE_LAG: 0,\t\t\t\t\t\t// Used to simulate latency\n        UPDATE_RATE: Math.round(1000 / 30), \t\t\t\t\t// How often to request a world-update from the server\n        CMD_RATE: Math.round(1000 / 31),                  // How often a client can send messages to server\n        MAX_BUFFER: 64,\n        EXPIRED_ENTITY_CHECK_RATE: 30,\t\t// How often we clear out entities that the server says no longer exist. Lower looks better but decreases framerate\n        MAX_UPDATE_FAILURE_COUNT: 3\t\t\t// How many times we allow ourselves to fail when getting behind the server time\n    },\n\n    CMDS: {\n        SERVER_CONNECT: 1 << 1,\t\t\t// Dispatched by the server if it acknowledges a client connection\n        SERVER_MATCH_START: 1 << 2,\t\t\t// Server broadcast game start\n        SERVER_END_GAME: 1 << 3,\t\t\t// Server broadcast game over\n        PLAYER_CONNECT: 1 << 4,\t\t\t// Initial connection to the server, not in game yet\n        PLAYER_JOINED: 1 << 5,           // Player has joined the current game\n        PLAYER_DISCONNECT: 1 << 6,           // Player has disconnected\n        PLAYER_UPDATE: 1 << 7,\t\t\t// Player is sending sampled input\n        SERVER_FULL_UPDATE: 1 << 8\t\t\t// Player is sending sampled input\n    },\n\n    // The client sends this bitmask to the server\n    // See (Keyboard.js)\n    INPUT_BITMASK: {\n        UP: 1 << 0,\n        DOWN: 1 << 1,\n        LEFT: 1 << 2,\n        RIGHT: 1 << 3,\n        SPACE: 1 << 4,\n        SHIFT: 1 << 5,\n        TAB: 1 << 6\n    }\n}\n\n\n// WEBPACK FOOTER //\n// ./js/model/Constants.js","/**\n File:\n NetChannelMessage.js\n Created By:\n Mario Gonzalez\n Project:\n RealtimeMultiplayerNodeJS\n Abstract:\n A common class for sending messages between ServerNetChannel / ClientNetChannel\n It is a small value-object wrapper which contains a sequence number and clientid\n Basic Usage:\n // Create the data that will live in the message\n var command = {};\n // Fill in the data\n command.cmd = aCommandConstant;\n command.data = {x:1, y:1};\n\n // Create the message\n var message = new Message(this.outgoingSequence, true, command)\n\n // Send the message (can happen later on)\n message.messageTime = this.realTime; // Store to determin latency\n\n (from netchannel)\n this.connection.send(message.encodedSelf());\n };\n */\nclass NetChannelMessage {\n\n    /**\n     * Creates a NetChannelMessage\n     * @param aSequenceNumber        A sequence number, used to track messages between server / client\n     * @param isReliable            A message is 'reliable' if it must be sent, for example fireweapon / disconnect. It is 'unreliable', if it can be overwritten with newer data, i.e. currentPosition\n     * @param aPayload                The message to send\n     */\n        //var message = new RealtimeMultiplayerGame.model.NetChannelMessage( this.outgoingSequenceNumber, this.clientID, isReliable, aCommandConstant, payload );\n    constructor(aSequenceNumber, aClientid, isReliable, aCommandType, aPayload) {\n        this.isReliable = false;\n        this.cmd = 0;\n        this.aPayload = null;\n        this.seq = -1;\n        this.id = -1;\n        this.messageTime = -1;\n        \n        // Info\n        this.seq = aSequenceNumber;\n        this.id = aClientid; \t\t\t\t\t// Server gives us one when we first  connect to it\n        this.cmd = aCommandType;\n\n        // Data\n        this.payload = aPayload;\n\n        // State\n        this.messageTime = -1;\n        this.isReliable = isReliable;\n        \n         // This message MUST be sent if it is 'reliable' (Connect / Disconnect).\n        // If not it can be overwritten by newer messages (for example moving is unreliable, because once it's outdates its worthless if new information exist)\n        \n    };\n\n    /**\n     * Wrap the message with useful information before sending, optional BiSON or something can be used to compress the message\n     */\n    encodeSelf() {\n        if (this.id == -1) {\n            console.log(\"(Message) Sending message without clientid. Note this is ok, if it's the first message to the server.\");\n        }\n\n        if (this.messageTime == -1) {\n            console.log(\"(Message) Sending message without messageTime. Expected result is undefined\");\n        }\n\n        return {id: this.clientid, seq: this.sequenceNumber, cmds: this.unencodedMessage, t: this.messageTime}\n    }\n}\n\nmodule.exports = NetChannelMessage;\n\n\n// WEBPACK FOOTER //\n// ./js/model/NetChannelMessage.js"],"sourceRoot":""}